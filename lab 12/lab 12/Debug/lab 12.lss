
lab 12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000726  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008001b6  008001b6  00000870  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000051  00000000  00000000  000023b5  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000070  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000006a9  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000322  00000000  00000000  00002b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000025a  00000000  00000000  00002e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000154  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000002b4  00000000  00000000  00003234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000611  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00003af9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e2       	ldi	r30, 0x26	; 38
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 3b       	cpi	r26, 0xB6	; 182
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 eb       	ldi	r26, 0xB6	; 182
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 3b       	cpi	r26, 0xBD	; 189
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  b2:	0c 94 91 03 	jmp	0x722	; 0x722 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <playnote>:

}
/************************************************************************/


void playnote(struct note n){
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	19 2f       	mov	r17, r25
	int i, j, k;
	unsigned char currentnote = n.notenum;
	unsigned char length = n.duration;
	int freq = frequency[currentnote];
  c2:	e8 2f       	mov	r30, r24
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e2 5e       	subi	r30, 0xE2	; 226
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	c0 81       	ld	r28, Z
  d0:	d1 81       	ldd	r29, Z+1	; 0x01
	int temp = (125000/freq)/2;
  d2:	9e 01       	movw	r18, r28
  d4:	0d 2e       	mov	r0, r29
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	64 e2       	ldi	r22, 0x24	; 36
  de:	74 ef       	ldi	r23, 0xF4	; 244
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 3c 03 	call	0x678	; 0x678 <__divmodsi4>
	for (i = 0; i < ((freq * length)/4); i++){
  e8:	1c 9f       	mul	r17, r28
  ea:	b0 01       	movw	r22, r0
  ec:	1d 9f       	mul	r17, r29
  ee:	70 0d       	add	r23, r0
  f0:	11 24       	eor	r1, r1
  f2:	77 23       	and	r23, r23
  f4:	14 f4       	brge	.+4      	; 0xfa <playnote+0x40>
  f6:	6d 5f       	subi	r22, 0xFD	; 253
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	75 95       	asr	r23
  fc:	67 95       	ror	r22
  fe:	75 95       	asr	r23
 100:	67 95       	ror	r22
 102:	16 16       	cp	r1, r22
 104:	17 06       	cpc	r1, r23
 106:	bc f4       	brge	.+46     	; 0x136 <playnote+0x7c>
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
		

		TOGGLESPEAKER;
 10c:	e2 e0       	ldi	r30, 0x02	; 2
		
		for(j = 0; j < temp; j++){
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	f0 e0       	ldi	r31, 0x00	; 0
	int freq = frequency[currentnote];
	int temp = (125000/freq)/2;
	for (i = 0; i < ((freq * length)/4); i++){
		

		TOGGLESPEAKER;
 112:	88 b1       	in	r24, 0x08	; 8
 114:	8e 27       	eor	r24, r30
 116:	88 b9       	out	0x08, r24	; 8
		
		for(j = 0; j < temp; j++){
 118:	12 16       	cp	r1, r18
 11a:	13 06       	cpc	r1, r19
 11c:	3c f4       	brge	.+14     	; 0x12c <playnote+0x72>
 11e:	8a 2f       	mov	r24, r26
 120:	9f 2f       	mov	r25, r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	00 00       	nop
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	82 17       	cp	r24, r18
 128:	93 07       	cpc	r25, r19
 12a:	dc f3       	brlt	.-10     	; 0x122 <playnote+0x68>
	int i, j, k;
	unsigned char currentnote = n.notenum;
	unsigned char length = n.duration;
	int freq = frequency[currentnote];
	int temp = (125000/freq)/2;
	for (i = 0; i < ((freq * length)/4); i++){
 12c:	4f 5f       	subi	r20, 0xFF	; 255
 12e:	5f 4f       	sbci	r21, 0xFF	; 255
 130:	46 17       	cp	r20, r22
 132:	57 07       	cpc	r21, r23
 134:	71 f7       	brne	.-36     	; 0x112 <playnote+0x58>

		
		
	}

}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <mydelayms>:

}

void mydelayms(unsigned int ms){
	int l;
	for (l = 0; l < ms; l++){
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	69 f0       	breq	.+26     	; 0x15c <mydelayms+0x1e>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	e9 ef       	ldi	r30, 0xF9	; 249
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <mydelayms+0xc>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <mydelayms+0x12>
 150:	00 00       	nop
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	28 17       	cp	r18, r24
 158:	39 07       	cpc	r19, r25
 15a:	a9 f7       	brne	.-22     	; 0x146 <mydelayms+0x8>
 15c:	08 95       	ret

0000015e <playsong>:
		
	}

}

void playsong(const struct song s){
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	int i, j, k;

	for (i = 0; i < s.numnotes; i++){
 16e:	e9 84       	ldd	r14, Y+9	; 0x09
 170:	f1 2c       	mov	r15, r1
 172:	1e 14       	cp	r1, r14
 174:	1f 04       	cpc	r1, r15
 176:	c4 f4       	brge	.+48     	; 0x1a8 <playsong+0x4a>
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0

		playnote(s.thenotes[i]);
 17c:	f8 01       	movw	r30, r16
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	89 e0       	ldi	r24, 0x09	; 9
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	8c 0f       	add	r24, r28
 188:	9d 1f       	adc	r25, r29
 18a:	e8 0f       	add	r30, r24
 18c:	f9 1f       	adc	r31, r25
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	92 81       	ldd	r25, Z+2	; 0x02
 192:	0e 94 5d 00 	call	0xba	; 0xba <playnote>
		mydelayms(10);
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 9f 00 	call	0x13e	; 0x13e <mydelayms>
}

void playsong(const struct song s){
	int i, j, k;

	for (i = 0; i < s.numnotes; i++){
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	0e 15       	cp	r16, r14
 1a4:	1f 05       	cpc	r17, r15
 1a6:	51 f7       	brne	.-44     	; 0x17c <playsong+0x1e>
		mydelayms(10);

	}


}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <mapkey>:
	for (l = 0; l < ms; l++){
		_delay_ms(1);
	}
}

signed char mapkey(signed char key){
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	60 97       	sbiw	r28, 0x10	; 16
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	int x;
	unsigned char keys[16] ={1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
 1ca:	90 e1       	ldi	r25, 0x10	; 16
 1cc:	ee e0       	ldi	r30, 0x0E	; 14
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	de 01       	movw	r26, r28
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	01 90       	ld	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	9a 95       	dec	r25
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <mapkey+0x1e>
	if (((key) > -1) && ((key) < 16)) {
 1dc:	80 31       	cpi	r24, 0x10	; 16
 1de:	38 f4       	brcc	.+14     	; 0x1ee <mapkey+0x38>
		return keys[key];
 1e0:	fe 01       	movw	r30, r28
 1e2:	e8 0f       	add	r30, r24
 1e4:	f1 1d       	adc	r31, r1
 1e6:	87 fd       	sbrc	r24, 7
 1e8:	fa 95       	dec	r31
 1ea:	81 81       	ldd	r24, Z+1	; 0x01
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <mapkey+0x3a>
	}
	else {
		return -1;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 1f0:	60 96       	adiw	r28, 0x10	; 16
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <getkey>:

signed char getkey() {
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
	int row, col;
	int mask1 = 0x10;
 206:	e0 e1       	ldi	r30, 0x10	; 16
 208:	f0 e0       	ldi	r31, 0x00	; 0
	int mask2;
	
	for(row = 0; row < 4; row++) {
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = mask1;
		
		mask1 <<= 1;
		mask2 = 0x01;
		for (col=0; col < 4; col++) {
			if(PINA&mask2) {
 20e:	d1 e0       	ldi	r29, 0x01	; 1
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	b2 e0       	ldi	r27, 0x02	; 2
 214:	a0 e0       	ldi	r26, 0x00	; 0
	int row, col;
	int mask1 = 0x10;
	int mask2;
	
	for(row = 0; row < 4; row++) {
		DDRA = mask1;
 216:	e1 b9       	out	0x01, r30	; 1
		PORTA = mask1;
 218:	e2 b9       	out	0x02, r30	; 2
		
		mask1 <<= 1;
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
		mask2 = 0x01;
		for (col=0; col < 4; col++) {
			if(PINA&mask2) {
 21e:	00 99       	sbic	0x00, 0	; 0
 220:	0b c0       	rjmp	.+22     	; 0x238 <getkey+0x36>
 222:	4d 2f       	mov	r20, r29
 224:	5c 2f       	mov	r21, r28
 226:	6b 2f       	mov	r22, r27
 228:	7a 2f       	mov	r23, r26
 22a:	20 b1       	in	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	26 23       	and	r18, r22
 230:	37 23       	and	r19, r23
 232:	23 2b       	or	r18, r19
 234:	39 f0       	breq	.+14     	; 0x244 <getkey+0x42>
 236:	02 c0       	rjmp	.+4      	; 0x23c <getkey+0x3a>
		DDRA = mask1;
		PORTA = mask1;
		
		mask1 <<= 1;
		mask2 = 0x01;
		for (col=0; col < 4; col++) {
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
			if(PINA&mask2) {
				return ((4*row)+col);
 23c:	88 0f       	add	r24, r24
 23e:	88 0f       	add	r24, r24
 240:	84 0f       	add	r24, r20
 242:	0c c0       	rjmp	.+24     	; 0x25c <getkey+0x5a>
			}
			mask2 <<= 1;
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
		DDRA = mask1;
		PORTA = mask1;
		
		mask1 <<= 1;
		mask2 = 0x01;
		for (col=0; col < 4; col++) {
 248:	4f 5f       	subi	r20, 0xFF	; 255
 24a:	5f 4f       	sbci	r21, 0xFF	; 255
 24c:	44 30       	cpi	r20, 0x04	; 4
 24e:	51 05       	cpc	r21, r1
 250:	61 f7       	brne	.-40     	; 0x22a <getkey+0x28>
signed char getkey() {
	int row, col;
	int mask1 = 0x10;
	int mask2;
	
	for(row = 0; row < 4; row++) {
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	84 30       	cpi	r24, 0x04	; 4
 256:	91 05       	cpc	r25, r1
 258:	f1 f6       	brne	.-68     	; 0x216 <getkey+0x14>
				return ((4*row)+col);
			}
			mask2 <<= 1;
		}
	}
	return -1;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <getnum>:
	} while (key != '#');
	
	return (ptr-array);
	
}
signed int getnum(void) {
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
	int result = 0;
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (key >= 0 && key <= 9) {
			result = result * 10 + key;
		}
		else if (key == '*') {
			result /= 10;
 26e:	0a e0       	ldi	r16, 0x0A	; 10
 270:	10 e0       	ldi	r17, 0x00	; 0
}
signed int getnum(void) {
	int result = 0;
	char key;
	while (1) {
		while (getkey() != -1) {}
 272:	0e 94 01 01 	call	0x202	; 0x202 <getkey>
 276:	8f 3f       	cpi	r24, 0xFF	; 255
 278:	e1 f7       	brne	.-8      	; 0x272 <getnum+0x10>
		while ((key = mapkey(getkey())) == -1) {}
 27a:	0e 94 01 01 	call	0x202	; 0x202 <getkey>
 27e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mapkey>
		
		if (key >= 0 && key <= 9) {
 282:	8a 30       	cpi	r24, 0x0A	; 10
 284:	70 f4       	brcc	.+28     	; 0x2a2 <getnum+0x40>
			result = result * 10 + key;
 286:	9e 01       	movw	r18, r28
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	cc 0f       	add	r28, r28
 28e:	dd 1f       	adc	r29, r29
 290:	cc 0f       	add	r28, r28
 292:	dd 1f       	adc	r29, r29
 294:	cc 0f       	add	r28, r28
 296:	dd 1f       	adc	r29, r29
 298:	c2 0f       	add	r28, r18
 29a:	d3 1f       	adc	r29, r19
 29c:	c8 0f       	add	r28, r24
 29e:	d1 1d       	adc	r29, r1
 2a0:	e8 cf       	rjmp	.-48     	; 0x272 <getnum+0x10>
		}
		else if (key == '*') {
 2a2:	8a 32       	cpi	r24, 0x2A	; 42
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <getnum+0x50>
			result /= 10;
 2a6:	ce 01       	movw	r24, r28
 2a8:	b8 01       	movw	r22, r16
 2aa:	0e 94 28 03 	call	0x650	; 0x650 <__divmodhi4>
 2ae:	eb 01       	movw	r28, r22
 2b0:	e0 cf       	rjmp	.-64     	; 0x272 <getnum+0x10>
		}
		else if (key == '#') {
 2b2:	83 32       	cpi	r24, 0x23	; 35
 2b4:	f1 f6       	brne	.-68     	; 0x272 <getnum+0x10>
			return result;
		}
	}
 2b6:	ce 01       	movw	r24, r28
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <main>:

/************************************************************************/

void main(){

	DDRC |= 0x02;
 2c2:	39 9a       	sbi	0x07, 1	; 7
	PORTC = 0x00;
 2c4:	18 b8       	out	0x08, r1	; 8

	lcd_init();
 2c6:	0e 94 38 02 	call	0x470	; 0x470 <lcd_init>
	stdout = &lcd_stdout;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	90 93 ba 01 	sts	0x01BA, r25
 2d2:	80 93 b9 01 	sts	0x01B9, r24
				key=getnum();

		switch (key){
			case 1:
			//printf("play song");s
			playsong(marylamb);
 2d6:	cd e3       	ldi	r28, 0x3D	; 61
	lcd_init();
	stdout = &lcd_stdout;
	char key;
	int i;
			while(1){
				key=getnum();
 2d8:	0e 94 31 01 	call	0x262	; 0x262 <getnum>

		switch (key){
 2dc:	99 27       	eor	r25, r25
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	91 05       	cpc	r25, r1
 2e2:	19 f0       	breq	.+6      	; 0x2ea <main+0x28>
 2e4:	02 97       	sbiw	r24, 0x02	; 2
 2e6:	f1 f0       	breq	.+60     	; 0x324 <main+0x62>
 2e8:	f7 cf       	rjmp	.-18     	; 0x2d8 <main+0x16>
			case 1:
			//printf("play song");s
			playsong(marylamb);
 2ea:	8d b7       	in	r24, 0x3d	; 61
 2ec:	9e b7       	in	r25, 0x3e	; 62
 2ee:	cd 97       	sbiw	r24, 0x3d	; 61
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	9e bf       	out	0x3e, r25	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	8d bf       	out	0x3d, r24	; 61
 2fa:	ad b7       	in	r26, 0x3d	; 61
 2fc:	be b7       	in	r27, 0x3e	; 62
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	ec e3       	ldi	r30, 0x3C	; 60
 302:	f1 e0       	ldi	r31, 0x01	; 1
 304:	8c 2f       	mov	r24, r28
 306:	01 90       	ld	r0, Z+
 308:	0d 92       	st	X+, r0
 30a:	8a 95       	dec	r24
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x44>
 30e:	0e 94 af 00 	call	0x15e	; 0x15e <playsong>
			break;
 312:	8d b7       	in	r24, 0x3d	; 61
 314:	9e b7       	in	r25, 0x3e	; 62
 316:	cd 96       	adiw	r24, 0x3d	; 61
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	9e bf       	out	0x3e, r25	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	8d bf       	out	0x3d, r24	; 61
 322:	da cf       	rjmp	.-76     	; 0x2d8 <main+0x16>
			case 2:
			playsong (steinsong);
 324:	8d b7       	in	r24, 0x3d	; 61
 326:	9e b7       	in	r25, 0x3e	; 62
 328:	cd 97       	sbiw	r24, 0x3d	; 61
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	9e bf       	out	0x3e, r25	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	8d bf       	out	0x3d, r24	; 61
 334:	ad b7       	in	r26, 0x3d	; 61
 336:	be b7       	in	r27, 0x3e	; 62
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	e9 e7       	ldi	r30, 0x79	; 121
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	8c 2f       	mov	r24, r28
 340:	01 90       	ld	r0, Z+
 342:	0d 92       	st	X+, r0
 344:	8a 95       	dec	r24
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x7e>
 348:	0e 94 af 00 	call	0x15e	; 0x15e <playsong>
			break;
 34c:	8d b7       	in	r24, 0x3d	; 61
 34e:	9e b7       	in	r25, 0x3e	; 62
 350:	cd 96       	adiw	r24, 0x3d	; 61
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	9e bf       	out	0x3e, r25	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	8d bf       	out	0x3d, r24	; 61
 35c:	bd cf       	rjmp	.-134    	; 0x2d8 <main+0x16>

0000035e <lcd_clk>:
 35e:	47 9a       	sbi	0x08, 7	; 8
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	8a 95       	dec	r24
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_clk+0x4>
 366:	00 00       	nop
 368:	47 98       	cbi	0x08, 7	; 8
 36a:	85 e0       	ldi	r24, 0x05	; 5
 36c:	8a 95       	dec	r24
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_clk+0xe>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <lcd_busy_wait>:
 374:	84 b1       	in	r24, 0x04	; 4
 376:	80 7f       	andi	r24, 0xF0	; 240
 378:	84 b9       	out	0x04, r24	; 4
 37a:	95 b1       	in	r25, 0x05	; 5
 37c:	29 2f       	mov	r18, r25
 37e:	20 71       	andi	r18, 0x10	; 16
 380:	2c 98       	cbi	0x05, 4	; 5
 382:	46 9a       	sbi	0x08, 6	; 8
 384:	47 9a       	sbi	0x08, 7	; 8
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <lcd_busy_wait+0x14>
 38c:	00 00       	nop
 38e:	93 b1       	in	r25, 0x03	; 3
 390:	47 98       	cbi	0x08, 7	; 8
 392:	85 e0       	ldi	r24, 0x05	; 5
 394:	8a 95       	dec	r24
 396:	f1 f7       	brne	.-4      	; 0x394 <lcd_busy_wait+0x20>
 398:	00 00       	nop
 39a:	47 9a       	sbi	0x08, 7	; 8
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_busy_wait+0x2a>
 3a2:	00 00       	nop
 3a4:	83 b1       	in	r24, 0x03	; 3
 3a6:	92 95       	swap	r25
 3a8:	90 7f       	andi	r25, 0xF0	; 240
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	89 2b       	or	r24, r25
 3ae:	47 98       	cbi	0x08, 7	; 8
 3b0:	95 e0       	ldi	r25, 0x05	; 5
 3b2:	9a 95       	dec	r25
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_busy_wait+0x3e>
 3b6:	00 00       	nop
 3b8:	87 fd       	sbrc	r24, 7
 3ba:	e4 cf       	rjmp	.-56     	; 0x384 <lcd_busy_wait+0x10>
 3bc:	46 98       	cbi	0x08, 6	; 8
 3be:	95 b1       	in	r25, 0x05	; 5
 3c0:	9f 7e       	andi	r25, 0xEF	; 239
 3c2:	92 2b       	or	r25, r18
 3c4:	95 b9       	out	0x05, r25	; 5
 3c6:	94 b1       	in	r25, 0x04	; 4
 3c8:	9f 60       	ori	r25, 0x0F	; 15
 3ca:	94 b9       	out	0x04, r25	; 4
 3cc:	08 95       	ret

000003ce <lcd_dread>:
 3ce:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_busy_wait>
 3d2:	84 b1       	in	r24, 0x04	; 4
 3d4:	80 7f       	andi	r24, 0xF0	; 240
 3d6:	84 b9       	out	0x04, r24	; 4
 3d8:	46 9a       	sbi	0x08, 6	; 8
 3da:	47 9a       	sbi	0x08, 7	; 8
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	8a 95       	dec	r24
 3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_dread+0x10>
 3e2:	00 00       	nop
 3e4:	23 b1       	in	r18, 0x03	; 3
 3e6:	47 98       	cbi	0x08, 7	; 8
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	8a 95       	dec	r24
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_dread+0x1c>
 3ee:	00 00       	nop
 3f0:	47 9a       	sbi	0x08, 7	; 8
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_dread+0x26>
 3f8:	00 00       	nop
 3fa:	93 b1       	in	r25, 0x03	; 3
 3fc:	22 95       	swap	r18
 3fe:	20 7f       	andi	r18, 0xF0	; 240
 400:	89 2f       	mov	r24, r25
 402:	8f 70       	andi	r24, 0x0F	; 15
 404:	47 98       	cbi	0x08, 7	; 8
 406:	46 98       	cbi	0x08, 6	; 8
 408:	94 b1       	in	r25, 0x04	; 4
 40a:	9f 60       	ori	r25, 0x0F	; 15
 40c:	94 b9       	out	0x04, r25	; 4
 40e:	82 2b       	or	r24, r18
 410:	08 95       	ret

00000412 <lcd_dwrite>:
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
 416:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_busy_wait>
 41a:	95 b1       	in	r25, 0x05	; 5
 41c:	8c 2f       	mov	r24, r28
 41e:	82 95       	swap	r24
 420:	8f 70       	andi	r24, 0x0F	; 15
 422:	90 7f       	andi	r25, 0xF0	; 240
 424:	98 2b       	or	r25, r24
 426:	95 b9       	out	0x05, r25	; 5
 428:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 42c:	95 b1       	in	r25, 0x05	; 5
 42e:	8c 2f       	mov	r24, r28
 430:	8f 70       	andi	r24, 0x0F	; 15
 432:	90 7f       	andi	r25, 0xF0	; 240
 434:	89 2b       	or	r24, r25
 436:	85 b9       	out	0x05, r24	; 5
 438:	cf 91       	pop	r28
 43a:	0c 94 af 01 	jmp	0x35e	; 0x35e <lcd_clk>

0000043e <lcd_iwrite>:
 43e:	cf 93       	push	r28
 440:	c8 2f       	mov	r28, r24
 442:	2c 98       	cbi	0x05, 4	; 5
 444:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_busy_wait>
 448:	95 b1       	in	r25, 0x05	; 5
 44a:	8c 2f       	mov	r24, r28
 44c:	82 95       	swap	r24
 44e:	8f 70       	andi	r24, 0x0F	; 15
 450:	90 7f       	andi	r25, 0xF0	; 240
 452:	98 2b       	or	r25, r24
 454:	95 b9       	out	0x05, r25	; 5
 456:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 45a:	95 b1       	in	r25, 0x05	; 5
 45c:	8c 2f       	mov	r24, r28
 45e:	8f 70       	andi	r24, 0x0F	; 15
 460:	90 7f       	andi	r25, 0xF0	; 240
 462:	89 2b       	or	r24, r25
 464:	85 b9       	out	0x05, r24	; 5
 466:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 46a:	2c 9a       	sbi	0x05, 4	; 5
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <lcd_init>:
 470:	85 b1       	in	r24, 0x05	; 5
 472:	80 7e       	andi	r24, 0xE0	; 224
 474:	85 b9       	out	0x05, r24	; 5
 476:	2c 98       	cbi	0x05, 4	; 5
 478:	46 98       	cbi	0x08, 6	; 8
 47a:	47 98       	cbi	0x08, 7	; 8
 47c:	84 b1       	in	r24, 0x04	; 4
 47e:	8f 61       	ori	r24, 0x1F	; 31
 480:	84 b9       	out	0x04, r24	; 4
 482:	87 b1       	in	r24, 0x07	; 7
 484:	80 6c       	ori	r24, 0xC0	; 192
 486:	87 b9       	out	0x07, r24	; 7
 488:	8f e5       	ldi	r24, 0x5F	; 95
 48a:	9a ee       	ldi	r25, 0xEA	; 234
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_init+0x1c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_init+0x22>
 492:	00 00       	nop
 494:	85 b1       	in	r24, 0x05	; 5
 496:	80 7f       	andi	r24, 0xF0	; 240
 498:	83 60       	ori	r24, 0x03	; 3
 49a:	85 b9       	out	0x05, r24	; 5
 49c:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 4a0:	87 e0       	ldi	r24, 0x07	; 7
 4a2:	90 e2       	ldi	r25, 0x20	; 32
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_init+0x34>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_init+0x3a>
 4aa:	00 00       	nop
 4ac:	85 b1       	in	r24, 0x05	; 5
 4ae:	80 7f       	andi	r24, 0xF0	; 240
 4b0:	83 60       	ori	r24, 0x03	; 3
 4b2:	85 b9       	out	0x05, r24	; 5
 4b4:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 4b8:	87 ec       	ldi	r24, 0xC7	; 199
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <lcd_init+0x4c>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <lcd_init+0x52>
 4c2:	00 00       	nop
 4c4:	85 b1       	in	r24, 0x05	; 5
 4c6:	80 7f       	andi	r24, 0xF0	; 240
 4c8:	83 60       	ori	r24, 0x03	; 3
 4ca:	85 b9       	out	0x05, r24	; 5
 4cc:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 4d0:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_busy_wait>
 4d4:	85 b1       	in	r24, 0x05	; 5
 4d6:	80 7f       	andi	r24, 0xF0	; 240
 4d8:	82 60       	ori	r24, 0x02	; 2
 4da:	85 b9       	out	0x05, r24	; 5
 4dc:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_clk>
 4e0:	84 e2       	ldi	r24, 0x24	; 36
 4e2:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 4e6:	8c e2       	ldi	r24, 0x2C	; 44
 4e8:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 4ec:	88 e0       	ldi	r24, 0x08	; 8
 4ee:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 4f8:	86 e0       	ldi	r24, 0x06	; 6
 4fa:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 4fe:	8f e0       	ldi	r24, 0x0F	; 15
 500:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 504:	80 ed       	ldi	r24, 0xD0	; 208
 506:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 50a:	2c 9a       	sbi	0x05, 4	; 5
 50c:	08 95       	ret

0000050e <lcd_putc>:
 50e:	3f 92       	push	r3
 510:	4f 92       	push	r4
 512:	5f 92       	push	r5
 514:	6f 92       	push	r6
 516:	7f 92       	push	r7
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	e0 97       	sbiw	r28, 0x30	; 48
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	8a 30       	cpi	r24, 0x0A	; 10
 542:	09 f4       	brne	.+2      	; 0x546 <lcd_putc+0x38>
 544:	81 c0       	rjmp	.+258    	; 0x648 <lcd_putc+0x13a>
 546:	38 2e       	mov	r3, r24
 548:	80 91 b6 01 	lds	r24, 0x01B6
 54c:	81 11       	cpse	r24, r1
 54e:	1d c0       	rjmp	.+58     	; 0x58a <lcd_putc+0x7c>
 550:	83 2d       	mov	r24, r3
 552:	0e 94 09 02 	call	0x412	; 0x412 <lcd_dwrite>
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	e0 96       	adiw	r28, 0x30	; 48
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	df 90       	pop	r13
 574:	cf 90       	pop	r12
 576:	bf 90       	pop	r11
 578:	af 90       	pop	r10
 57a:	9f 90       	pop	r9
 57c:	8f 90       	pop	r8
 57e:	7f 90       	pop	r7
 580:	6f 90       	pop	r6
 582:	5f 90       	pop	r5
 584:	4f 90       	pop	r4
 586:	3f 90       	pop	r3
 588:	08 95       	ret
 58a:	80 ec       	ldi	r24, 0xC0	; 192
 58c:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 590:	8e 01       	movw	r16, r28
 592:	0f 5f       	subi	r16, 0xFF	; 255
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	4e 01       	movw	r8, r28
 598:	81 e1       	ldi	r24, 0x11	; 17
 59a:	88 0e       	add	r8, r24
 59c:	91 1c       	adc	r9, r1
 59e:	78 01       	movw	r14, r16
 5a0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_dread>
 5a4:	f7 01       	movw	r30, r14
 5a6:	81 93       	st	Z+, r24
 5a8:	7f 01       	movw	r14, r30
 5aa:	e8 15       	cp	r30, r8
 5ac:	f9 05       	cpc	r31, r9
 5ae:	c1 f7       	brne	.-16     	; 0x5a0 <lcd_putc+0x92>
 5b0:	80 e9       	ldi	r24, 0x90	; 144
 5b2:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 5b6:	64 01       	movw	r12, r8
 5b8:	5e 01       	movw	r10, r28
 5ba:	f1 e2       	ldi	r31, 0x21	; 33
 5bc:	af 0e       	add	r10, r31
 5be:	b1 1c       	adc	r11, r1
 5c0:	74 01       	movw	r14, r8
 5c2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_dread>
 5c6:	f7 01       	movw	r30, r14
 5c8:	81 93       	st	Z+, r24
 5ca:	7f 01       	movw	r14, r30
 5cc:	ea 15       	cp	r30, r10
 5ce:	fb 05       	cpc	r31, r11
 5d0:	c1 f7       	brne	.-16     	; 0x5c2 <lcd_putc+0xb4>
 5d2:	80 ed       	ldi	r24, 0xD0	; 208
 5d4:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 5d8:	75 01       	movw	r14, r10
 5da:	3e 01       	movw	r6, r28
 5dc:	f1 e3       	ldi	r31, 0x31	; 49
 5de:	6f 0e       	add	r6, r31
 5e0:	71 1c       	adc	r7, r1
 5e2:	25 01       	movw	r4, r10
 5e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_dread>
 5e8:	f2 01       	movw	r30, r4
 5ea:	81 93       	st	Z+, r24
 5ec:	2f 01       	movw	r4, r30
 5ee:	e6 15       	cp	r30, r6
 5f0:	f7 05       	cpc	r31, r7
 5f2:	c1 f7       	brne	.-16     	; 0x5e4 <lcd_putc+0xd6>
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 600:	f8 01       	movw	r30, r16
 602:	81 91       	ld	r24, Z+
 604:	8f 01       	movw	r16, r30
 606:	0e 94 09 02 	call	0x412	; 0x412 <lcd_dwrite>
 60a:	80 16       	cp	r8, r16
 60c:	91 06       	cpc	r9, r17
 60e:	c1 f7       	brne	.-16     	; 0x600 <lcd_putc+0xf2>
 610:	80 ec       	ldi	r24, 0xC0	; 192
 612:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 616:	f6 01       	movw	r30, r12
 618:	81 91       	ld	r24, Z+
 61a:	6f 01       	movw	r12, r30
 61c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_dwrite>
 620:	ac 14       	cp	r10, r12
 622:	bd 04       	cpc	r11, r13
 624:	c1 f7       	brne	.-16     	; 0x616 <lcd_putc+0x108>
 626:	80 e9       	ldi	r24, 0x90	; 144
 628:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 62c:	f7 01       	movw	r30, r14
 62e:	81 91       	ld	r24, Z+
 630:	7f 01       	movw	r14, r30
 632:	0e 94 09 02 	call	0x412	; 0x412 <lcd_dwrite>
 636:	6e 14       	cp	r6, r14
 638:	7f 04       	cpc	r7, r15
 63a:	c1 f7       	brne	.-16     	; 0x62c <lcd_putc+0x11e>
 63c:	80 ed       	ldi	r24, 0xD0	; 208
 63e:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_iwrite>
 642:	10 92 b6 01 	sts	0x01B6, r1
 646:	84 cf       	rjmp	.-248    	; 0x550 <lcd_putc+0x42>
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 b6 01 	sts	0x01B6, r24
 64e:	83 cf       	rjmp	.-250    	; 0x556 <lcd_putc+0x48>

00000650 <__divmodhi4>:
 650:	97 fb       	bst	r25, 7
 652:	07 2e       	mov	r0, r23
 654:	16 f4       	brtc	.+4      	; 0x65a <__divmodhi4+0xa>
 656:	00 94       	com	r0
 658:	07 d0       	rcall	.+14     	; 0x668 <__divmodhi4_neg1>
 65a:	77 fd       	sbrc	r23, 7
 65c:	09 d0       	rcall	.+18     	; 0x670 <__divmodhi4_neg2>
 65e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__udivmodhi4>
 662:	07 fc       	sbrc	r0, 7
 664:	05 d0       	rcall	.+10     	; 0x670 <__divmodhi4_neg2>
 666:	3e f4       	brtc	.+14     	; 0x676 <__divmodhi4_exit>

00000668 <__divmodhi4_neg1>:
 668:	90 95       	com	r25
 66a:	81 95       	neg	r24
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <__divmodhi4_neg2>:
 670:	70 95       	com	r23
 672:	61 95       	neg	r22
 674:	7f 4f       	sbci	r23, 0xFF	; 255

00000676 <__divmodhi4_exit>:
 676:	08 95       	ret

00000678 <__divmodsi4>:
 678:	05 2e       	mov	r0, r21
 67a:	97 fb       	bst	r25, 7
 67c:	1e f4       	brtc	.+6      	; 0x684 <__divmodsi4+0xc>
 67e:	00 94       	com	r0
 680:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__negsi2>
 684:	57 fd       	sbrc	r21, 7
 686:	07 d0       	rcall	.+14     	; 0x696 <__divmodsi4_neg2>
 688:	0e 94 6f 03 	call	0x6de	; 0x6de <__udivmodsi4>
 68c:	07 fc       	sbrc	r0, 7
 68e:	03 d0       	rcall	.+6      	; 0x696 <__divmodsi4_neg2>
 690:	4e f4       	brtc	.+18     	; 0x6a4 <__divmodsi4_exit>
 692:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__negsi2>

00000696 <__divmodsi4_neg2>:
 696:	50 95       	com	r21
 698:	40 95       	com	r20
 69a:	30 95       	com	r19
 69c:	21 95       	neg	r18
 69e:	3f 4f       	sbci	r19, 0xFF	; 255
 6a0:	4f 4f       	sbci	r20, 0xFF	; 255
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255

000006a4 <__divmodsi4_exit>:
 6a4:	08 95       	ret

000006a6 <__negsi2>:
 6a6:	90 95       	com	r25
 6a8:	80 95       	com	r24
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__udivmodhi4>:
 6b6:	aa 1b       	sub	r26, r26
 6b8:	bb 1b       	sub	r27, r27
 6ba:	51 e1       	ldi	r21, 0x11	; 17
 6bc:	07 c0       	rjmp	.+14     	; 0x6cc <__udivmodhi4_ep>

000006be <__udivmodhi4_loop>:
 6be:	aa 1f       	adc	r26, r26
 6c0:	bb 1f       	adc	r27, r27
 6c2:	a6 17       	cp	r26, r22
 6c4:	b7 07       	cpc	r27, r23
 6c6:	10 f0       	brcs	.+4      	; 0x6cc <__udivmodhi4_ep>
 6c8:	a6 1b       	sub	r26, r22
 6ca:	b7 0b       	sbc	r27, r23

000006cc <__udivmodhi4_ep>:
 6cc:	88 1f       	adc	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	5a 95       	dec	r21
 6d2:	a9 f7       	brne	.-22     	; 0x6be <__udivmodhi4_loop>
 6d4:	80 95       	com	r24
 6d6:	90 95       	com	r25
 6d8:	bc 01       	movw	r22, r24
 6da:	cd 01       	movw	r24, r26
 6dc:	08 95       	ret

000006de <__udivmodsi4>:
 6de:	a1 e2       	ldi	r26, 0x21	; 33
 6e0:	1a 2e       	mov	r1, r26
 6e2:	aa 1b       	sub	r26, r26
 6e4:	bb 1b       	sub	r27, r27
 6e6:	fd 01       	movw	r30, r26
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <__udivmodsi4_ep>

000006ea <__udivmodsi4_loop>:
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	ee 1f       	adc	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	a2 17       	cp	r26, r18
 6f4:	b3 07       	cpc	r27, r19
 6f6:	e4 07       	cpc	r30, r20
 6f8:	f5 07       	cpc	r31, r21
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__udivmodsi4_ep>
 6fc:	a2 1b       	sub	r26, r18
 6fe:	b3 0b       	sbc	r27, r19
 700:	e4 0b       	sbc	r30, r20
 702:	f5 0b       	sbc	r31, r21

00000704 <__udivmodsi4_ep>:
 704:	66 1f       	adc	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	1a 94       	dec	r1
 70e:	69 f7       	brne	.-38     	; 0x6ea <__udivmodsi4_loop>
 710:	60 95       	com	r22
 712:	70 95       	com	r23
 714:	80 95       	com	r24
 716:	90 95       	com	r25
 718:	9b 01       	movw	r18, r22
 71a:	ac 01       	movw	r20, r24
 71c:	bd 01       	movw	r22, r26
 71e:	cf 01       	movw	r24, r30
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>
