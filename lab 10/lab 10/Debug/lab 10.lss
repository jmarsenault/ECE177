
lab 10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000c30  00000cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800142  00800142  00000d06  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007d  00000000  00000000  0000284d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000050  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000005fe  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000253  00000000  00000000  00002f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000019f  00000000  00000000  000031ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000ec  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000212  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000054b  00000000  00000000  0000364a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000040  00000000  00000000  00003b95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e3       	ldi	r30, 0x30	; 48
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 34       	cpi	r26, 0x42	; 66
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e4       	ldi	r26, 0x42	; 66
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 34       	cpi	r26, 0x49	; 73
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  b2:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <getkey>:
		
	}

}

signed char getkey(){
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	int i;
	int k;
	int mask = 0x10;
  be:	e0 e1       	ldi	r30, 0x10	; 16
  c0:	f0 e0       	ldi	r31, 0x00	; 0
	int mask2 = 0x01;
	
	for (i = 0; i < 4; i++) {
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
		
		mask <<= 1;
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
			if (PINA & mask2) {
  c6:	d1 e0       	ldi	r29, 0x01	; 1
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	b2 e0       	ldi	r27, 0x02	; 2
  cc:	a0 e0       	ldi	r26, 0x00	; 0
	int k;
	int mask = 0x10;
	int mask2 = 0x01;
	
	for (i = 0; i < 4; i++) {
		DDRA = mask;
  ce:	e1 b9       	out	0x01, r30	; 1
		PORTA = mask;
  d0:	e2 b9       	out	0x02, r30	; 2
		
		mask <<= 1;
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
			if (PINA & mask2) {
  d6:	00 99       	sbic	0x00, 0	; 0
  d8:	0b c0       	rjmp	.+22     	; 0xf0 <getkey+0x36>
  da:	4d 2f       	mov	r20, r29
  dc:	5c 2f       	mov	r21, r28
  de:	6b 2f       	mov	r22, r27
  e0:	7a 2f       	mov	r23, r26
  e2:	20 b1       	in	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	26 23       	and	r18, r22
  e8:	37 23       	and	r19, r23
  ea:	23 2b       	or	r18, r19
  ec:	39 f0       	breq	.+14     	; 0xfc <getkey+0x42>
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <getkey+0x3a>
		PORTA = mask;
		
		mask <<= 1;
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
			if (PINA & mask2) {
				return (4 * i + k);
  f4:	88 0f       	add	r24, r24
  f6:	88 0f       	add	r24, r24
  f8:	84 0f       	add	r24, r20
  fa:	0c c0       	rjmp	.+24     	; 0x114 <getkey+0x5a>
			}
			mask2 <<= 1;
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
		PORTA = mask;
		
		mask <<= 1;
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
 100:	4f 5f       	subi	r20, 0xFF	; 255
 102:	5f 4f       	sbci	r21, 0xFF	; 255
 104:	44 30       	cpi	r20, 0x04	; 4
 106:	51 05       	cpc	r21, r1
 108:	61 f7       	brne	.-40     	; 0xe2 <getkey+0x28>
	int i;
	int k;
	int mask = 0x10;
	int mask2 = 0x01;
	
	for (i = 0; i < 4; i++) {
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	91 05       	cpc	r25, r1
 110:	f1 f6       	brne	.-68     	; 0xce <getkey+0x14>
				return (4 * i + k);
			}
			mask2 <<= 1;
		}
	}
	return (-1);
 112:	8f ef       	ldi	r24, 0xFF	; 255
	
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <mapkey>:
signed char mapkey (signed char key) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	60 97       	sbiw	r28, 0x10	; 16
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
	if (key > 15 || key < 0) {
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	98 f4       	brcc	.+38     	; 0x158 <mapkey+0x3e>
		return (-1);
	}
	else {
		unsigned char map[] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
 132:	90 e1       	ldi	r25, 0x10	; 16
 134:	ee e0       	ldi	r30, 0x0E	; 14
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	9a 95       	dec	r25
 142:	e1 f7       	brne	.-8      	; 0x13c <mapkey+0x22>
		return map[key];
 144:	e1 e0       	ldi	r30, 0x01	; 1
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	e8 0f       	add	r30, r24
 14e:	f1 1d       	adc	r31, r1
 150:	87 fd       	sbrc	r24, 7
 152:	fa 95       	dec	r31
 154:	80 81       	ld	r24, Z
 156:	01 c0       	rjmp	.+2      	; 0x15a <mapkey+0x40>
	return (-1);
	
}
signed char mapkey (signed char key) {
	if (key > 15 || key < 0) {
		return (-1);
 158:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else {
		unsigned char map[] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
		return map[key];
	}
}
 15a:	60 96       	adiw	r28, 0x10	; 16
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <getpw>:
char getpw(char maxsize, char *array){
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	8b 01       	movw	r16, r22
	char hold = 1;
	char key = 0;
	char *ptr = array;
 17a:	eb 01       	movw	r28, r22
		do {
		} while (getkey() != -1);
		do {
		} while ((key = mapkey(getkey())) == -1);

		if (key >= 0 && key <= 13 && (ptr-array) < maxsize) {
 17c:	e8 2e       	mov	r14, r24
 17e:	f1 2c       	mov	r15, r1
	char hold = 1;
	char key = 0;
	char *ptr = array;
	do {
		do {
		} while (getkey() != -1);
 180:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 184:	8f 3f       	cpi	r24, 0xFF	; 255
 186:	e1 f7       	brne	.-8      	; 0x180 <getpw+0x14>
		do {
		} while ((key = mapkey(getkey())) == -1);
 188:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 18c:	0e 94 8d 00 	call	0x11a	; 0x11a <mapkey>

		if (key >= 0 && key <= 13 && (ptr-array) < maxsize) {
 190:	8e 30       	cpi	r24, 0x0E	; 14
 192:	40 f4       	brcc	.+16     	; 0x1a4 <getpw+0x38>
 194:	9e 01       	movw	r18, r28
 196:	20 1b       	sub	r18, r16
 198:	31 0b       	sbc	r19, r17
 19a:	2e 15       	cp	r18, r14
 19c:	3f 05       	cpc	r19, r15
 19e:	14 f4       	brge	.+4      	; 0x1a4 <getpw+0x38>
			*ptr = key;
 1a0:	89 93       	st	Y+, r24
			ptr++;
 1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <getpw+0x4c>
		}
		else if (key == '*') {
 1a4:	8a 32       	cpi	r24, 0x2A	; 42
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <getpw+0x4c>
			if ((ptr-array) > 0) {
 1a8:	ce 01       	movw	r24, r28
 1aa:	80 1b       	sub	r24, r16
 1ac:	91 0b       	sbc	r25, r17
 1ae:	18 16       	cp	r1, r24
 1b0:	19 06       	cpc	r1, r25
 1b2:	34 f7       	brge	.-52     	; 0x180 <getpw+0x14>
				ptr--;
 1b4:	21 97       	sbiw	r28, 0x01	; 1
 1b6:	e4 cf       	rjmp	.-56     	; 0x180 <getpw+0x14>
			}
		}
		
	} while (key != '#');
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	11 f7       	brne	.-60     	; 0x180 <getpw+0x14>
	
	return (ptr-array);
	
}
 1bc:	8c 2f       	mov	r24, r28
 1be:	80 1b       	sub	r24, r16
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	08 95       	ret

000001ce <compareArrays>:
char compareArrays(char size, const char *array1, const char *array2){
	char *ptr1= array1;
	char *ptr2 = array2;
	char a = 1;
	for(ptr1= array1; (ptr1-array1)<size; ptr1++){
 1ce:	88 23       	and	r24, r24
 1d0:	79 f0       	breq	.+30     	; 0x1f0 <compareArrays+0x22>
 1d2:	fb 01       	movw	r30, r22
 1d4:	a4 2f       	mov	r26, r20
 1d6:	b5 2f       	mov	r27, r21
 1d8:	68 0f       	add	r22, r24
 1da:	71 1d       	adc	r23, r1
 1dc:	81 e0       	ldi	r24, 0x01	; 1
		if(*ptr1 != *ptr2){
			a=0;
 1de:	30 e0       	ldi	r19, 0x00	; 0
char compareArrays(char size, const char *array1, const char *array2){
	char *ptr1= array1;
	char *ptr2 = array2;
	char a = 1;
	for(ptr1= array1; (ptr1-array1)<size; ptr1++){
		if(*ptr1 != *ptr2){
 1e0:	21 91       	ld	r18, Z+
 1e2:	9d 91       	ld	r25, X+
 1e4:	29 13       	cpse	r18, r25
			a=0;
 1e6:	83 2f       	mov	r24, r19
}
char compareArrays(char size, const char *array1, const char *array2){
	char *ptr1= array1;
	char *ptr2 = array2;
	char a = 1;
	for(ptr1= array1; (ptr1-array1)<size; ptr1++){
 1e8:	e6 17       	cp	r30, r22
 1ea:	f7 07       	cpc	r31, r23
 1ec:	c9 f7       	brne	.-14     	; 0x1e0 <compareArrays+0x12>
 1ee:	08 95       	ret
	
}
char compareArrays(char size, const char *array1, const char *array2){
	char *ptr1= array1;
	char *ptr2 = array2;
	char a = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
			a=0;
		}
		ptr2++;
	}
	return a;
}
 1f2:	08 95       	ret

000001f4 <delaycycles>:
	}
	
	}

void delaycycles(unsigned int cycles){
	TCNT1 = ~(cycles - 28);
 1f4:	4c 97       	sbiw	r24, 0x1c	; 28
 1f6:	80 95       	com	r24
 1f8:	90 95       	com	r25
 1fa:	90 93 85 00 	sts	0x0085, r25
 1fe:	80 93 84 00 	sts	0x0084, r24
	TIFR1 = 0x01<< TOV1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	86 bb       	out	0x16, r24	; 22
	while(!(TIFR1&(0x01<<TOV1)));
 206:	b0 9b       	sbis	0x16, 0	; 22
 208:	fe cf       	rjmp	.-4      	; 0x206 <delaycycles+0x12>
		return;
		
	
}
 20a:	08 95       	ret

0000020c <mydelayms>:
		ptr2++;
	}
	return a;
}

void mydelayms(unsigned int ms){
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <mydelayms+0xa>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	8c 01       	movw	r16, r24
	volatile int i;
	for(i=0;i<ms;i++){
 21c:	1a 82       	std	Y+2, r1	; 0x02
 21e:	19 82       	std	Y+1, r1	; 0x01
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	80 17       	cp	r24, r16
 226:	91 07       	cpc	r25, r17
 228:	78 f4       	brcc	.+30     	; 0x248 <mydelayms+0x3c>
		delaycycles(1000);
 22a:	88 ee       	ldi	r24, 0xE8	; 232
 22c:	93 e0       	ldi	r25, 0x03	; 3
 22e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <delaycycles>
	return a;
}

void mydelayms(unsigned int ms){
	volatile int i;
	for(i=0;i<ms;i++){
 232:	29 81       	ldd	r18, Y+1	; 0x01
 234:	3a 81       	ldd	r19, Y+2	; 0x02
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	3a 83       	std	Y+2, r19	; 0x02
 23c:	29 83       	std	Y+1, r18	; 0x01
 23e:	29 81       	ldd	r18, Y+1	; 0x01
 240:	3a 81       	ldd	r19, Y+2	; 0x02
 242:	20 17       	cp	r18, r16
 244:	31 07       	cpc	r19, r17
 246:	88 f3       	brcs	.-30     	; 0x22a <mydelayms+0x1e>
		delaycycles(1000);
	}
	
	}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <main>:
char getpw(char maxsize, char * const pw); 	// Input keys into the array
char compareArrays(char size, const char * const a1, const char * const a2);
void delaycycles(unsigned int cycles);
void mydelayms(unsigned int ms);

void main(void) {
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	61 97       	sbiw	r28, 0x11	; 17
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	char passwd[] = {1};			// Hardcode the password here
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	89 83       	std	Y+1, r24	; 0x01
	char pwsize = 1;
	char pwbuff[BUFFSIZE];


		DDRA = 0xF0; // While running the lower 4 bits of PORTA will be inputs and the
 26e:	90 ef       	ldi	r25, 0xF0	; 240
 270:	91 b9       	out	0x01, r25	; 1
	// upper 4 bits will be outputs, but we'll make them outputs one at
	// a time, so we'll actually control the data direction in getkey(),
	// the keypad scanning routine.
	
	TCCR1B  = 0x01;		// Enable Timer 1 to count normally using the internal clock
 272:	80 93 81 00 	sts	0x0081, r24


	lcd_init();		// Init the LCD display
 276:	0e 94 2b 02 	call	0x456	; 0x456 <lcd_init>
	stdout=&lcd_stdout;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	90 93 46 01 	sts	0x0146, r25
 282:	80 93 45 01 	sts	0x0145, r24
			printf("\n \n \n \n \n \n \n \n \n ");
			
		}
		
		else {
			printf("Error");
 286:	0b e3       	ldi	r16, 0x3B	; 59
 288:	11 e0       	ldi	r17, 0x01	; 1
		
		
		if((x==pwsize)&&(compareArrays(pwsize,pwbuff,passwd)==1)){
			printf("Open lock\n");
			mydelayms(2000);
			printf("\n \n \n \n \n \n \n \n \n ");
 28a:	0f 2e       	mov	r0, r31
 28c:	f8 e2       	ldi	r31, 0x28	; 40
 28e:	ef 2e       	mov	r14, r31
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	ff 2e       	mov	r15, r31
 294:	f0 2d       	mov	r31, r0
	while(1){
		char x;
		char t;
		//char t=5;
		
		x = getpw(pwsize, pwbuff);
 296:	be 01       	movw	r22, r28
 298:	6e 5f       	subi	r22, 0xFE	; 254
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 b6 00 	call	0x16c	; 0x16c <getpw>
		
		
		if((x==pwsize)&&(compareArrays(pwsize,pwbuff,passwd)==1)){
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	c9 f4       	brne	.+50     	; 0x2d8 <main+0x82>
 2a6:	ae 01       	movw	r20, r28
 2a8:	4f 5f       	subi	r20, 0xFF	; 255
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	be 01       	movw	r22, r28
 2ae:	6e 5f       	subi	r22, 0xFE	; 254
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <compareArrays>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	79 f4       	brne	.+30     	; 0x2d8 <main+0x82>
			printf("Open lock\n");
 2ba:	8e e1       	ldi	r24, 0x1E	; 30
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 31 03 	call	0x662	; 0x662 <puts>
			mydelayms(2000);
 2c2:	80 ed       	ldi	r24, 0xD0	; 208
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	0e 94 06 01 	call	0x20c	; 0x20c <mydelayms>
			printf("\n \n \n \n \n \n \n \n \n ");
 2ca:	ff 92       	push	r15
 2cc:	ef 92       	push	r14
 2ce:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	df cf       	rjmp	.-66     	; 0x296 <main+0x40>
			
		}
		
		else {
			printf("Error");
 2d8:	1f 93       	push	r17
 2da:	0f 93       	push	r16
 2dc:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
			mydelayms(500);
 2e0:	84 ef       	ldi	r24, 0xF4	; 244
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 06 01 	call	0x20c	; 0x20c <mydelayms>
			printf("\n \n \n \n \n \n \n \n \n");
 2e8:	8a e2       	ldi	r24, 0x2A	; 42
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 31 03 	call	0x662	; 0x662 <puts>
				printf("Error");
 2f0:	1f 93       	push	r17
 2f2:	0f 93       	push	r16
 2f4:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
				mydelayms(500);
 2f8:	84 ef       	ldi	r24, 0xF4	; 244
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 06 01 	call	0x20c	; 0x20c <mydelayms>
				printf("\n \n \n \n \n \n \n \n \n");
 300:	8a e2       	ldi	r24, 0x2A	; 42
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 31 03 	call	0x662	; 0x662 <puts>
					printf("Error");
 308:	1f 93       	push	r17
 30a:	0f 93       	push	r16
 30c:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
					mydelayms(500);
 310:	84 ef       	ldi	r24, 0xF4	; 244
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 06 01 	call	0x20c	; 0x20c <mydelayms>
					printf("\n \n \n \n \n \n \n \n \n");
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 31 03 	call	0x662	; 0x662 <puts>
						printf("Error");
 320:	1f 93       	push	r17
 322:	0f 93       	push	r16
 324:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
						mydelayms(500);
 328:	84 ef       	ldi	r24, 0xF4	; 244
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 06 01 	call	0x20c	; 0x20c <mydelayms>
						printf("\n \n \n \n \n \n \n \n \n");
 330:	8a e2       	ldi	r24, 0x2A	; 42
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 31 03 	call	0x662	; 0x662 <puts>
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	a9 cf       	rjmp	.-174    	; 0x296 <main+0x40>

00000344 <lcd_clk>:
 344:	47 9a       	sbi	0x08, 7	; 8
 346:	85 e0       	ldi	r24, 0x05	; 5
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_clk+0x4>
 34c:	00 00       	nop
 34e:	47 98       	cbi	0x08, 7	; 8
 350:	85 e0       	ldi	r24, 0x05	; 5
 352:	8a 95       	dec	r24
 354:	f1 f7       	brne	.-4      	; 0x352 <lcd_clk+0xe>
 356:	00 00       	nop
 358:	08 95       	ret

0000035a <lcd_busy_wait>:
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	84 b9       	out	0x04, r24	; 4
 360:	95 b1       	in	r25, 0x05	; 5
 362:	29 2f       	mov	r18, r25
 364:	20 71       	andi	r18, 0x10	; 16
 366:	2c 98       	cbi	0x05, 4	; 5
 368:	46 9a       	sbi	0x08, 6	; 8
 36a:	47 9a       	sbi	0x08, 7	; 8
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <lcd_busy_wait+0x14>
 372:	00 00       	nop
 374:	93 b1       	in	r25, 0x03	; 3
 376:	47 98       	cbi	0x08, 7	; 8
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_busy_wait+0x20>
 37e:	00 00       	nop
 380:	47 9a       	sbi	0x08, 7	; 8
 382:	85 e0       	ldi	r24, 0x05	; 5
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <lcd_busy_wait+0x2a>
 388:	00 00       	nop
 38a:	83 b1       	in	r24, 0x03	; 3
 38c:	92 95       	swap	r25
 38e:	90 7f       	andi	r25, 0xF0	; 240
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	89 2b       	or	r24, r25
 394:	47 98       	cbi	0x08, 7	; 8
 396:	95 e0       	ldi	r25, 0x05	; 5
 398:	9a 95       	dec	r25
 39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_busy_wait+0x3e>
 39c:	00 00       	nop
 39e:	87 fd       	sbrc	r24, 7
 3a0:	e4 cf       	rjmp	.-56     	; 0x36a <lcd_busy_wait+0x10>
 3a2:	46 98       	cbi	0x08, 6	; 8
 3a4:	95 b1       	in	r25, 0x05	; 5
 3a6:	9f 7e       	andi	r25, 0xEF	; 239
 3a8:	92 2b       	or	r25, r18
 3aa:	95 b9       	out	0x05, r25	; 5
 3ac:	94 b1       	in	r25, 0x04	; 4
 3ae:	9f 60       	ori	r25, 0x0F	; 15
 3b0:	94 b9       	out	0x04, r25	; 4
 3b2:	08 95       	ret

000003b4 <lcd_dread>:
 3b4:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_busy_wait>
 3b8:	84 b1       	in	r24, 0x04	; 4
 3ba:	80 7f       	andi	r24, 0xF0	; 240
 3bc:	84 b9       	out	0x04, r24	; 4
 3be:	46 9a       	sbi	0x08, 6	; 8
 3c0:	47 9a       	sbi	0x08, 7	; 8
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <lcd_dread+0x10>
 3c8:	00 00       	nop
 3ca:	23 b1       	in	r18, 0x03	; 3
 3cc:	47 98       	cbi	0x08, 7	; 8
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_dread+0x1c>
 3d4:	00 00       	nop
 3d6:	47 9a       	sbi	0x08, 7	; 8
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_dread+0x26>
 3de:	00 00       	nop
 3e0:	93 b1       	in	r25, 0x03	; 3
 3e2:	22 95       	swap	r18
 3e4:	20 7f       	andi	r18, 0xF0	; 240
 3e6:	89 2f       	mov	r24, r25
 3e8:	8f 70       	andi	r24, 0x0F	; 15
 3ea:	47 98       	cbi	0x08, 7	; 8
 3ec:	46 98       	cbi	0x08, 6	; 8
 3ee:	94 b1       	in	r25, 0x04	; 4
 3f0:	9f 60       	ori	r25, 0x0F	; 15
 3f2:	94 b9       	out	0x04, r25	; 4
 3f4:	82 2b       	or	r24, r18
 3f6:	08 95       	ret

000003f8 <lcd_dwrite>:
 3f8:	cf 93       	push	r28
 3fa:	c8 2f       	mov	r28, r24
 3fc:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_busy_wait>
 400:	95 b1       	in	r25, 0x05	; 5
 402:	8c 2f       	mov	r24, r28
 404:	82 95       	swap	r24
 406:	8f 70       	andi	r24, 0x0F	; 15
 408:	90 7f       	andi	r25, 0xF0	; 240
 40a:	98 2b       	or	r25, r24
 40c:	95 b9       	out	0x05, r25	; 5
 40e:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 412:	95 b1       	in	r25, 0x05	; 5
 414:	8c 2f       	mov	r24, r28
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	90 7f       	andi	r25, 0xF0	; 240
 41a:	89 2b       	or	r24, r25
 41c:	85 b9       	out	0x05, r24	; 5
 41e:	cf 91       	pop	r28
 420:	0c 94 a2 01 	jmp	0x344	; 0x344 <lcd_clk>

00000424 <lcd_iwrite>:
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
 428:	2c 98       	cbi	0x05, 4	; 5
 42a:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_busy_wait>
 42e:	95 b1       	in	r25, 0x05	; 5
 430:	8c 2f       	mov	r24, r28
 432:	82 95       	swap	r24
 434:	8f 70       	andi	r24, 0x0F	; 15
 436:	90 7f       	andi	r25, 0xF0	; 240
 438:	98 2b       	or	r25, r24
 43a:	95 b9       	out	0x05, r25	; 5
 43c:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 440:	95 b1       	in	r25, 0x05	; 5
 442:	8c 2f       	mov	r24, r28
 444:	8f 70       	andi	r24, 0x0F	; 15
 446:	90 7f       	andi	r25, 0xF0	; 240
 448:	89 2b       	or	r24, r25
 44a:	85 b9       	out	0x05, r24	; 5
 44c:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 450:	2c 9a       	sbi	0x05, 4	; 5
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <lcd_init>:
 456:	85 b1       	in	r24, 0x05	; 5
 458:	80 7e       	andi	r24, 0xE0	; 224
 45a:	85 b9       	out	0x05, r24	; 5
 45c:	2c 98       	cbi	0x05, 4	; 5
 45e:	46 98       	cbi	0x08, 6	; 8
 460:	47 98       	cbi	0x08, 7	; 8
 462:	84 b1       	in	r24, 0x04	; 4
 464:	8f 61       	ori	r24, 0x1F	; 31
 466:	84 b9       	out	0x04, r24	; 4
 468:	87 b1       	in	r24, 0x07	; 7
 46a:	80 6c       	ori	r24, 0xC0	; 192
 46c:	87 b9       	out	0x07, r24	; 7
 46e:	8f e5       	ldi	r24, 0x5F	; 95
 470:	9a ee       	ldi	r25, 0xEA	; 234
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <lcd_init+0x1c>
 476:	00 c0       	rjmp	.+0      	; 0x478 <lcd_init+0x22>
 478:	00 00       	nop
 47a:	85 b1       	in	r24, 0x05	; 5
 47c:	80 7f       	andi	r24, 0xF0	; 240
 47e:	83 60       	ori	r24, 0x03	; 3
 480:	85 b9       	out	0x05, r24	; 5
 482:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 486:	87 e0       	ldi	r24, 0x07	; 7
 488:	90 e2       	ldi	r25, 0x20	; 32
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x34>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <lcd_init+0x3a>
 490:	00 00       	nop
 492:	85 b1       	in	r24, 0x05	; 5
 494:	80 7f       	andi	r24, 0xF0	; 240
 496:	83 60       	ori	r24, 0x03	; 3
 498:	85 b9       	out	0x05, r24	; 5
 49a:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 49e:	87 ec       	ldi	r24, 0xC7	; 199
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_init+0x4c>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_init+0x52>
 4a8:	00 00       	nop
 4aa:	85 b1       	in	r24, 0x05	; 5
 4ac:	80 7f       	andi	r24, 0xF0	; 240
 4ae:	83 60       	ori	r24, 0x03	; 3
 4b0:	85 b9       	out	0x05, r24	; 5
 4b2:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 4b6:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_busy_wait>
 4ba:	85 b1       	in	r24, 0x05	; 5
 4bc:	80 7f       	andi	r24, 0xF0	; 240
 4be:	82 60       	ori	r24, 0x02	; 2
 4c0:	85 b9       	out	0x05, r24	; 5
 4c2:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_clk>
 4c6:	84 e2       	ldi	r24, 0x24	; 36
 4c8:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4cc:	8c e2       	ldi	r24, 0x2C	; 44
 4ce:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4ea:	80 ed       	ldi	r24, 0xD0	; 208
 4ec:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 4f0:	2c 9a       	sbi	0x05, 4	; 5
 4f2:	08 95       	ret

000004f4 <lcd_putc>:
 4f4:	3f 92       	push	r3
 4f6:	4f 92       	push	r4
 4f8:	5f 92       	push	r5
 4fa:	6f 92       	push	r6
 4fc:	7f 92       	push	r7
 4fe:	8f 92       	push	r8
 500:	9f 92       	push	r9
 502:	af 92       	push	r10
 504:	bf 92       	push	r11
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	e0 97       	sbiw	r28, 0x30	; 48
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	8a 30       	cpi	r24, 0x0A	; 10
 528:	09 f4       	brne	.+2      	; 0x52c <lcd_putc+0x38>
 52a:	81 c0       	rjmp	.+258    	; 0x62e <lcd_putc+0x13a>
 52c:	38 2e       	mov	r3, r24
 52e:	80 91 42 01 	lds	r24, 0x0142
 532:	81 11       	cpse	r24, r1
 534:	1d c0       	rjmp	.+58     	; 0x570 <lcd_putc+0x7c>
 536:	83 2d       	mov	r24, r3
 538:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_dwrite>
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	e0 96       	adiw	r28, 0x30	; 48
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	df 90       	pop	r13
 55a:	cf 90       	pop	r12
 55c:	bf 90       	pop	r11
 55e:	af 90       	pop	r10
 560:	9f 90       	pop	r9
 562:	8f 90       	pop	r8
 564:	7f 90       	pop	r7
 566:	6f 90       	pop	r6
 568:	5f 90       	pop	r5
 56a:	4f 90       	pop	r4
 56c:	3f 90       	pop	r3
 56e:	08 95       	ret
 570:	80 ec       	ldi	r24, 0xC0	; 192
 572:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 576:	8e 01       	movw	r16, r28
 578:	0f 5f       	subi	r16, 0xFF	; 255
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	4e 01       	movw	r8, r28
 57e:	81 e1       	ldi	r24, 0x11	; 17
 580:	88 0e       	add	r8, r24
 582:	91 1c       	adc	r9, r1
 584:	78 01       	movw	r14, r16
 586:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_dread>
 58a:	f7 01       	movw	r30, r14
 58c:	81 93       	st	Z+, r24
 58e:	7f 01       	movw	r14, r30
 590:	e8 15       	cp	r30, r8
 592:	f9 05       	cpc	r31, r9
 594:	c1 f7       	brne	.-16     	; 0x586 <lcd_putc+0x92>
 596:	80 e9       	ldi	r24, 0x90	; 144
 598:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 59c:	64 01       	movw	r12, r8
 59e:	5e 01       	movw	r10, r28
 5a0:	f1 e2       	ldi	r31, 0x21	; 33
 5a2:	af 0e       	add	r10, r31
 5a4:	b1 1c       	adc	r11, r1
 5a6:	74 01       	movw	r14, r8
 5a8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_dread>
 5ac:	f7 01       	movw	r30, r14
 5ae:	81 93       	st	Z+, r24
 5b0:	7f 01       	movw	r14, r30
 5b2:	ea 15       	cp	r30, r10
 5b4:	fb 05       	cpc	r31, r11
 5b6:	c1 f7       	brne	.-16     	; 0x5a8 <lcd_putc+0xb4>
 5b8:	80 ed       	ldi	r24, 0xD0	; 208
 5ba:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 5be:	75 01       	movw	r14, r10
 5c0:	3e 01       	movw	r6, r28
 5c2:	f1 e3       	ldi	r31, 0x31	; 49
 5c4:	6f 0e       	add	r6, r31
 5c6:	71 1c       	adc	r7, r1
 5c8:	25 01       	movw	r4, r10
 5ca:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_dread>
 5ce:	f2 01       	movw	r30, r4
 5d0:	81 93       	st	Z+, r24
 5d2:	2f 01       	movw	r4, r30
 5d4:	e6 15       	cp	r30, r6
 5d6:	f7 05       	cpc	r31, r7
 5d8:	c1 f7       	brne	.-16     	; 0x5ca <lcd_putc+0xd6>
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 5e0:	80 e8       	ldi	r24, 0x80	; 128
 5e2:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 5e6:	f8 01       	movw	r30, r16
 5e8:	81 91       	ld	r24, Z+
 5ea:	8f 01       	movw	r16, r30
 5ec:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_dwrite>
 5f0:	80 16       	cp	r8, r16
 5f2:	91 06       	cpc	r9, r17
 5f4:	c1 f7       	brne	.-16     	; 0x5e6 <lcd_putc+0xf2>
 5f6:	80 ec       	ldi	r24, 0xC0	; 192
 5f8:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 5fc:	f6 01       	movw	r30, r12
 5fe:	81 91       	ld	r24, Z+
 600:	6f 01       	movw	r12, r30
 602:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_dwrite>
 606:	ac 14       	cp	r10, r12
 608:	bd 04       	cpc	r11, r13
 60a:	c1 f7       	brne	.-16     	; 0x5fc <lcd_putc+0x108>
 60c:	80 e9       	ldi	r24, 0x90	; 144
 60e:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 612:	f7 01       	movw	r30, r14
 614:	81 91       	ld	r24, Z+
 616:	7f 01       	movw	r14, r30
 618:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_dwrite>
 61c:	6e 14       	cp	r6, r14
 61e:	7f 04       	cpc	r7, r15
 620:	c1 f7       	brne	.-16     	; 0x612 <lcd_putc+0x11e>
 622:	80 ed       	ldi	r24, 0xD0	; 208
 624:	0e 94 12 02 	call	0x424	; 0x424 <lcd_iwrite>
 628:	10 92 42 01 	sts	0x0142, r1
 62c:	84 cf       	rjmp	.-248    	; 0x536 <lcd_putc+0x42>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 42 01 	sts	0x0142, r24
 634:	83 cf       	rjmp	.-250    	; 0x53c <lcd_putc+0x48>

00000636 <printf>:
 636:	a0 e0       	ldi	r26, 0x00	; 0
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e1 e2       	ldi	r30, 0x21	; 33
 63c:	f3 e0       	ldi	r31, 0x03	; 3
 63e:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__prologue_saves__+0x20>
 642:	ae 01       	movw	r20, r28
 644:	4b 5f       	subi	r20, 0xFB	; 251
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	fa 01       	movw	r30, r20
 64a:	61 91       	ld	r22, Z+
 64c:	71 91       	ld	r23, Z+
 64e:	af 01       	movw	r20, r30
 650:	80 91 45 01 	lds	r24, 0x0145
 654:	90 91 46 01 	lds	r25, 0x0146
 658:	0e 94 61 03 	call	0x6c2	; 0x6c2 <vfprintf>
 65c:	e2 e0       	ldi	r30, 0x02	; 2
 65e:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__epilogue_restores__+0x20>

00000662 <puts>:
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	e0 91 45 01 	lds	r30, 0x0145
 66e:	f0 91 46 01 	lds	r31, 0x0146
 672:	23 81       	ldd	r18, Z+3	; 0x03
 674:	21 ff       	sbrs	r18, 1
 676:	1b c0       	rjmp	.+54     	; 0x6ae <puts+0x4c>
 678:	8c 01       	movw	r16, r24
 67a:	d0 e0       	ldi	r29, 0x00	; 0
 67c:	c0 e0       	ldi	r28, 0x00	; 0
 67e:	f8 01       	movw	r30, r16
 680:	81 91       	ld	r24, Z+
 682:	8f 01       	movw	r16, r30
 684:	60 91 45 01 	lds	r22, 0x0145
 688:	70 91 46 01 	lds	r23, 0x0146
 68c:	db 01       	movw	r26, r22
 68e:	18 96       	adiw	r26, 0x08	; 8
 690:	ed 91       	ld	r30, X+
 692:	fc 91       	ld	r31, X
 694:	19 97       	sbiw	r26, 0x09	; 9
 696:	88 23       	and	r24, r24
 698:	31 f0       	breq	.+12     	; 0x6a6 <puts+0x44>
 69a:	09 95       	icall
 69c:	89 2b       	or	r24, r25
 69e:	79 f3       	breq	.-34     	; 0x67e <puts+0x1c>
 6a0:	df ef       	ldi	r29, 0xFF	; 255
 6a2:	cf ef       	ldi	r28, 0xFF	; 255
 6a4:	ec cf       	rjmp	.-40     	; 0x67e <puts+0x1c>
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	09 95       	icall
 6aa:	89 2b       	or	r24, r25
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <puts+0x52>
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <puts+0x56>
 6b4:	8d 2f       	mov	r24, r29
 6b6:	9c 2f       	mov	r25, r28
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	08 95       	ret

000006c2 <vfprintf>:
 6c2:	ac e0       	ldi	r26, 0x0C	; 12
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e7 e6       	ldi	r30, 0x67	; 103
 6c8:	f3 e0       	ldi	r31, 0x03	; 3
 6ca:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__prologue_saves__>
 6ce:	7c 01       	movw	r14, r24
 6d0:	6b 01       	movw	r12, r22
 6d2:	8a 01       	movw	r16, r20
 6d4:	fc 01       	movw	r30, r24
 6d6:	17 82       	std	Z+7, r1	; 0x07
 6d8:	16 82       	std	Z+6, r1	; 0x06
 6da:	83 81       	ldd	r24, Z+3	; 0x03
 6dc:	81 ff       	sbrs	r24, 1
 6de:	bd c1       	rjmp	.+890    	; 0xa5a <__stack+0x15b>
 6e0:	ce 01       	movw	r24, r28
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	4c 01       	movw	r8, r24
 6e6:	f7 01       	movw	r30, r14
 6e8:	93 81       	ldd	r25, Z+3	; 0x03
 6ea:	f6 01       	movw	r30, r12
 6ec:	93 fd       	sbrc	r25, 3
 6ee:	85 91       	lpm	r24, Z+
 6f0:	93 ff       	sbrs	r25, 3
 6f2:	81 91       	ld	r24, Z+
 6f4:	6f 01       	movw	r12, r30
 6f6:	88 23       	and	r24, r24
 6f8:	09 f4       	brne	.+2      	; 0x6fc <vfprintf+0x3a>
 6fa:	ab c1       	rjmp	.+854    	; 0xa52 <__stack+0x153>
 6fc:	85 32       	cpi	r24, 0x25	; 37
 6fe:	39 f4       	brne	.+14     	; 0x70e <vfprintf+0x4c>
 700:	93 fd       	sbrc	r25, 3
 702:	85 91       	lpm	r24, Z+
 704:	93 ff       	sbrs	r25, 3
 706:	81 91       	ld	r24, Z+
 708:	6f 01       	movw	r12, r30
 70a:	85 32       	cpi	r24, 0x25	; 37
 70c:	29 f4       	brne	.+10     	; 0x718 <vfprintf+0x56>
 70e:	b7 01       	movw	r22, r14
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 716:	e7 cf       	rjmp	.-50     	; 0x6e6 <vfprintf+0x24>
 718:	51 2c       	mov	r5, r1
 71a:	31 2c       	mov	r3, r1
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	20 32       	cpi	r18, 0x20	; 32
 720:	a0 f4       	brcc	.+40     	; 0x74a <vfprintf+0x88>
 722:	8b 32       	cpi	r24, 0x2B	; 43
 724:	69 f0       	breq	.+26     	; 0x740 <vfprintf+0x7e>
 726:	30 f4       	brcc	.+12     	; 0x734 <vfprintf+0x72>
 728:	80 32       	cpi	r24, 0x20	; 32
 72a:	59 f0       	breq	.+22     	; 0x742 <vfprintf+0x80>
 72c:	83 32       	cpi	r24, 0x23	; 35
 72e:	69 f4       	brne	.+26     	; 0x74a <vfprintf+0x88>
 730:	20 61       	ori	r18, 0x10	; 16
 732:	2c c0       	rjmp	.+88     	; 0x78c <vfprintf+0xca>
 734:	8d 32       	cpi	r24, 0x2D	; 45
 736:	39 f0       	breq	.+14     	; 0x746 <vfprintf+0x84>
 738:	80 33       	cpi	r24, 0x30	; 48
 73a:	39 f4       	brne	.+14     	; 0x74a <vfprintf+0x88>
 73c:	21 60       	ori	r18, 0x01	; 1
 73e:	26 c0       	rjmp	.+76     	; 0x78c <vfprintf+0xca>
 740:	22 60       	ori	r18, 0x02	; 2
 742:	24 60       	ori	r18, 0x04	; 4
 744:	23 c0       	rjmp	.+70     	; 0x78c <vfprintf+0xca>
 746:	28 60       	ori	r18, 0x08	; 8
 748:	21 c0       	rjmp	.+66     	; 0x78c <vfprintf+0xca>
 74a:	27 fd       	sbrc	r18, 7
 74c:	27 c0       	rjmp	.+78     	; 0x79c <vfprintf+0xda>
 74e:	30 ed       	ldi	r19, 0xD0	; 208
 750:	38 0f       	add	r19, r24
 752:	3a 30       	cpi	r19, 0x0A	; 10
 754:	78 f4       	brcc	.+30     	; 0x774 <vfprintf+0xb2>
 756:	26 ff       	sbrs	r18, 6
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0xa4>
 75a:	fa e0       	ldi	r31, 0x0A	; 10
 75c:	5f 9e       	mul	r5, r31
 75e:	30 0d       	add	r19, r0
 760:	11 24       	eor	r1, r1
 762:	53 2e       	mov	r5, r19
 764:	13 c0       	rjmp	.+38     	; 0x78c <vfprintf+0xca>
 766:	8a e0       	ldi	r24, 0x0A	; 10
 768:	38 9e       	mul	r3, r24
 76a:	30 0d       	add	r19, r0
 76c:	11 24       	eor	r1, r1
 76e:	33 2e       	mov	r3, r19
 770:	20 62       	ori	r18, 0x20	; 32
 772:	0c c0       	rjmp	.+24     	; 0x78c <vfprintf+0xca>
 774:	8e 32       	cpi	r24, 0x2E	; 46
 776:	21 f4       	brne	.+8      	; 0x780 <vfprintf+0xbe>
 778:	26 fd       	sbrc	r18, 6
 77a:	6b c1       	rjmp	.+726    	; 0xa52 <__stack+0x153>
 77c:	20 64       	ori	r18, 0x40	; 64
 77e:	06 c0       	rjmp	.+12     	; 0x78c <vfprintf+0xca>
 780:	8c 36       	cpi	r24, 0x6C	; 108
 782:	11 f4       	brne	.+4      	; 0x788 <vfprintf+0xc6>
 784:	20 68       	ori	r18, 0x80	; 128
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0xca>
 788:	88 36       	cpi	r24, 0x68	; 104
 78a:	41 f4       	brne	.+16     	; 0x79c <vfprintf+0xda>
 78c:	f6 01       	movw	r30, r12
 78e:	93 fd       	sbrc	r25, 3
 790:	85 91       	lpm	r24, Z+
 792:	93 ff       	sbrs	r25, 3
 794:	81 91       	ld	r24, Z+
 796:	6f 01       	movw	r12, r30
 798:	81 11       	cpse	r24, r1
 79a:	c1 cf       	rjmp	.-126    	; 0x71e <vfprintf+0x5c>
 79c:	98 2f       	mov	r25, r24
 79e:	9f 7d       	andi	r25, 0xDF	; 223
 7a0:	95 54       	subi	r25, 0x45	; 69
 7a2:	93 30       	cpi	r25, 0x03	; 3
 7a4:	28 f4       	brcc	.+10     	; 0x7b0 <vfprintf+0xee>
 7a6:	0c 5f       	subi	r16, 0xFC	; 252
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	ff e3       	ldi	r31, 0x3F	; 63
 7ac:	f9 83       	std	Y+1, r31	; 0x01
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <vfprintf+0x108>
 7b0:	83 36       	cpi	r24, 0x63	; 99
 7b2:	31 f0       	breq	.+12     	; 0x7c0 <vfprintf+0xfe>
 7b4:	83 37       	cpi	r24, 0x73	; 115
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <vfprintf+0x112>
 7b8:	83 35       	cpi	r24, 0x53	; 83
 7ba:	09 f0       	breq	.+2      	; 0x7be <vfprintf+0xfc>
 7bc:	5b c0       	rjmp	.+182    	; 0x874 <vfprintf+0x1b2>
 7be:	22 c0       	rjmp	.+68     	; 0x804 <vfprintf+0x142>
 7c0:	f8 01       	movw	r30, r16
 7c2:	80 81       	ld	r24, Z
 7c4:	89 83       	std	Y+1, r24	; 0x01
 7c6:	0e 5f       	subi	r16, 0xFE	; 254
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	44 24       	eor	r4, r4
 7cc:	43 94       	inc	r4
 7ce:	51 2c       	mov	r5, r1
 7d0:	54 01       	movw	r10, r8
 7d2:	15 c0       	rjmp	.+42     	; 0x7fe <vfprintf+0x13c>
 7d4:	38 01       	movw	r6, r16
 7d6:	f2 e0       	ldi	r31, 0x02	; 2
 7d8:	6f 0e       	add	r6, r31
 7da:	71 1c       	adc	r7, r1
 7dc:	f8 01       	movw	r30, r16
 7de:	a0 80       	ld	r10, Z
 7e0:	b1 80       	ldd	r11, Z+1	; 0x01
 7e2:	26 ff       	sbrs	r18, 6
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <vfprintf+0x12a>
 7e6:	65 2d       	mov	r22, r5
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <vfprintf+0x12e>
 7ec:	6f ef       	ldi	r22, 0xFF	; 255
 7ee:	7f ef       	ldi	r23, 0xFF	; 255
 7f0:	c5 01       	movw	r24, r10
 7f2:	2c 87       	std	Y+12, r18	; 0x0c
 7f4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <strnlen>
 7f8:	2c 01       	movw	r4, r24
 7fa:	83 01       	movw	r16, r6
 7fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 7fe:	2f 77       	andi	r18, 0x7F	; 127
 800:	22 2e       	mov	r2, r18
 802:	17 c0       	rjmp	.+46     	; 0x832 <vfprintf+0x170>
 804:	38 01       	movw	r6, r16
 806:	f2 e0       	ldi	r31, 0x02	; 2
 808:	6f 0e       	add	r6, r31
 80a:	71 1c       	adc	r7, r1
 80c:	f8 01       	movw	r30, r16
 80e:	a0 80       	ld	r10, Z
 810:	b1 80       	ldd	r11, Z+1	; 0x01
 812:	26 ff       	sbrs	r18, 6
 814:	03 c0       	rjmp	.+6      	; 0x81c <vfprintf+0x15a>
 816:	65 2d       	mov	r22, r5
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x15e>
 81c:	6f ef       	ldi	r22, 0xFF	; 255
 81e:	7f ef       	ldi	r23, 0xFF	; 255
 820:	c5 01       	movw	r24, r10
 822:	2c 87       	std	Y+12, r18	; 0x0c
 824:	0e 94 33 05 	call	0xa66	; 0xa66 <strnlen_P>
 828:	2c 01       	movw	r4, r24
 82a:	2c 85       	ldd	r18, Y+12	; 0x0c
 82c:	20 68       	ori	r18, 0x80	; 128
 82e:	22 2e       	mov	r2, r18
 830:	83 01       	movw	r16, r6
 832:	23 fc       	sbrc	r2, 3
 834:	1b c0       	rjmp	.+54     	; 0x86c <vfprintf+0x1aa>
 836:	83 2d       	mov	r24, r3
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	48 16       	cp	r4, r24
 83c:	59 06       	cpc	r5, r25
 83e:	b0 f4       	brcc	.+44     	; 0x86c <vfprintf+0x1aa>
 840:	b7 01       	movw	r22, r14
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 84a:	3a 94       	dec	r3
 84c:	f4 cf       	rjmp	.-24     	; 0x836 <vfprintf+0x174>
 84e:	f5 01       	movw	r30, r10
 850:	27 fc       	sbrc	r2, 7
 852:	85 91       	lpm	r24, Z+
 854:	27 fe       	sbrs	r2, 7
 856:	81 91       	ld	r24, Z+
 858:	5f 01       	movw	r10, r30
 85a:	b7 01       	movw	r22, r14
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 862:	31 10       	cpse	r3, r1
 864:	3a 94       	dec	r3
 866:	f1 e0       	ldi	r31, 0x01	; 1
 868:	4f 1a       	sub	r4, r31
 86a:	51 08       	sbc	r5, r1
 86c:	41 14       	cp	r4, r1
 86e:	51 04       	cpc	r5, r1
 870:	71 f7       	brne	.-36     	; 0x84e <vfprintf+0x18c>
 872:	e5 c0       	rjmp	.+458    	; 0xa3e <__stack+0x13f>
 874:	84 36       	cpi	r24, 0x64	; 100
 876:	11 f0       	breq	.+4      	; 0x87c <vfprintf+0x1ba>
 878:	89 36       	cpi	r24, 0x69	; 105
 87a:	39 f5       	brne	.+78     	; 0x8ca <vfprintf+0x208>
 87c:	f8 01       	movw	r30, r16
 87e:	27 ff       	sbrs	r18, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <vfprintf+0x1ce>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <vfprintf+0x1de>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	07 2e       	mov	r0, r23
 896:	00 0c       	add	r0, r0
 898:	88 0b       	sbc	r24, r24
 89a:	99 0b       	sbc	r25, r25
 89c:	0e 5f       	subi	r16, 0xFE	; 254
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	2f 76       	andi	r18, 0x6F	; 111
 8a2:	72 2e       	mov	r7, r18
 8a4:	97 ff       	sbrs	r25, 7
 8a6:	09 c0       	rjmp	.+18     	; 0x8ba <vfprintf+0x1f8>
 8a8:	90 95       	com	r25
 8aa:	80 95       	com	r24
 8ac:	70 95       	com	r23
 8ae:	61 95       	neg	r22
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	20 68       	ori	r18, 0x80	; 128
 8b8:	72 2e       	mov	r7, r18
 8ba:	2a e0       	ldi	r18, 0x0A	; 10
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	a4 01       	movw	r20, r8
 8c0:	0e 94 81 05 	call	0xb02	; 0xb02 <__ultoa_invert>
 8c4:	a8 2e       	mov	r10, r24
 8c6:	a8 18       	sub	r10, r8
 8c8:	44 c0       	rjmp	.+136    	; 0x952 <__stack+0x53>
 8ca:	85 37       	cpi	r24, 0x75	; 117
 8cc:	29 f4       	brne	.+10     	; 0x8d8 <vfprintf+0x216>
 8ce:	2f 7e       	andi	r18, 0xEF	; 239
 8d0:	b2 2e       	mov	r11, r18
 8d2:	2a e0       	ldi	r18, 0x0A	; 10
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	25 c0       	rjmp	.+74     	; 0x922 <__stack+0x23>
 8d8:	f2 2f       	mov	r31, r18
 8da:	f9 7f       	andi	r31, 0xF9	; 249
 8dc:	bf 2e       	mov	r11, r31
 8de:	8f 36       	cpi	r24, 0x6F	; 111
 8e0:	c1 f0       	breq	.+48     	; 0x912 <__stack+0x13>
 8e2:	18 f4       	brcc	.+6      	; 0x8ea <vfprintf+0x228>
 8e4:	88 35       	cpi	r24, 0x58	; 88
 8e6:	79 f0       	breq	.+30     	; 0x906 <__stack+0x7>
 8e8:	b4 c0       	rjmp	.+360    	; 0xa52 <__stack+0x153>
 8ea:	80 37       	cpi	r24, 0x70	; 112
 8ec:	19 f0       	breq	.+6      	; 0x8f4 <vfprintf+0x232>
 8ee:	88 37       	cpi	r24, 0x78	; 120
 8f0:	21 f0       	breq	.+8      	; 0x8fa <vfprintf+0x238>
 8f2:	af c0       	rjmp	.+350    	; 0xa52 <__stack+0x153>
 8f4:	2f 2f       	mov	r18, r31
 8f6:	20 61       	ori	r18, 0x10	; 16
 8f8:	b2 2e       	mov	r11, r18
 8fa:	b4 fe       	sbrs	r11, 4
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
 8fe:	8b 2d       	mov	r24, r11
 900:	84 60       	ori	r24, 0x04	; 4
 902:	b8 2e       	mov	r11, r24
 904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0x19>
 906:	24 ff       	sbrs	r18, 4
 908:	0a c0       	rjmp	.+20     	; 0x91e <__stack+0x1f>
 90a:	9f 2f       	mov	r25, r31
 90c:	96 60       	ori	r25, 0x06	; 6
 90e:	b9 2e       	mov	r11, r25
 910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0x1f>
 912:	28 e0       	ldi	r18, 0x08	; 8
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	05 c0       	rjmp	.+10     	; 0x922 <__stack+0x23>
 918:	20 e1       	ldi	r18, 0x10	; 16
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	20 e1       	ldi	r18, 0x10	; 16
 920:	32 e0       	ldi	r19, 0x02	; 2
 922:	f8 01       	movw	r30, r16
 924:	b7 fe       	sbrs	r11, 7
 926:	07 c0       	rjmp	.+14     	; 0x936 <__stack+0x37>
 928:	60 81       	ld	r22, Z
 92a:	71 81       	ldd	r23, Z+1	; 0x01
 92c:	82 81       	ldd	r24, Z+2	; 0x02
 92e:	93 81       	ldd	r25, Z+3	; 0x03
 930:	0c 5f       	subi	r16, 0xFC	; 252
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	06 c0       	rjmp	.+12     	; 0x942 <__stack+0x43>
 936:	60 81       	ld	r22, Z
 938:	71 81       	ldd	r23, Z+1	; 0x01
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 5f       	subi	r16, 0xFE	; 254
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	a4 01       	movw	r20, r8
 944:	0e 94 81 05 	call	0xb02	; 0xb02 <__ultoa_invert>
 948:	a8 2e       	mov	r10, r24
 94a:	a8 18       	sub	r10, r8
 94c:	fb 2d       	mov	r31, r11
 94e:	ff 77       	andi	r31, 0x7F	; 127
 950:	7f 2e       	mov	r7, r31
 952:	76 fe       	sbrs	r7, 6
 954:	0b c0       	rjmp	.+22     	; 0x96c <__stack+0x6d>
 956:	37 2d       	mov	r19, r7
 958:	3e 7f       	andi	r19, 0xFE	; 254
 95a:	a5 14       	cp	r10, r5
 95c:	50 f4       	brcc	.+20     	; 0x972 <__stack+0x73>
 95e:	74 fe       	sbrs	r7, 4
 960:	0a c0       	rjmp	.+20     	; 0x976 <__stack+0x77>
 962:	72 fc       	sbrc	r7, 2
 964:	08 c0       	rjmp	.+16     	; 0x976 <__stack+0x77>
 966:	37 2d       	mov	r19, r7
 968:	3e 7e       	andi	r19, 0xEE	; 238
 96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x77>
 96c:	ba 2c       	mov	r11, r10
 96e:	37 2d       	mov	r19, r7
 970:	03 c0       	rjmp	.+6      	; 0x978 <__stack+0x79>
 972:	ba 2c       	mov	r11, r10
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x79>
 976:	b5 2c       	mov	r11, r5
 978:	34 ff       	sbrs	r19, 4
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__stack+0x97>
 97c:	fe 01       	movw	r30, r28
 97e:	ea 0d       	add	r30, r10
 980:	f1 1d       	adc	r31, r1
 982:	80 81       	ld	r24, Z
 984:	80 33       	cpi	r24, 0x30	; 48
 986:	11 f4       	brne	.+4      	; 0x98c <__stack+0x8d>
 988:	39 7e       	andi	r19, 0xE9	; 233
 98a:	09 c0       	rjmp	.+18     	; 0x99e <__stack+0x9f>
 98c:	32 ff       	sbrs	r19, 2
 98e:	06 c0       	rjmp	.+12     	; 0x99c <__stack+0x9d>
 990:	b3 94       	inc	r11
 992:	b3 94       	inc	r11
 994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x9f>
 996:	83 2f       	mov	r24, r19
 998:	86 78       	andi	r24, 0x86	; 134
 99a:	09 f0       	breq	.+2      	; 0x99e <__stack+0x9f>
 99c:	b3 94       	inc	r11
 99e:	33 fd       	sbrc	r19, 3
 9a0:	13 c0       	rjmp	.+38     	; 0x9c8 <__stack+0xc9>
 9a2:	30 ff       	sbrs	r19, 0
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <__stack+0xb3>
 9a6:	5a 2c       	mov	r5, r10
 9a8:	b3 14       	cp	r11, r3
 9aa:	18 f4       	brcc	.+6      	; 0x9b2 <__stack+0xb3>
 9ac:	53 0c       	add	r5, r3
 9ae:	5b 18       	sub	r5, r11
 9b0:	b3 2c       	mov	r11, r3
 9b2:	b3 14       	cp	r11, r3
 9b4:	68 f4       	brcc	.+26     	; 0x9d0 <__stack+0xd1>
 9b6:	b7 01       	movw	r22, r14
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	3c 87       	std	Y+12, r19	; 0x0c
 9be:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 9c2:	b3 94       	inc	r11
 9c4:	3c 85       	ldd	r19, Y+12	; 0x0c
 9c6:	f5 cf       	rjmp	.-22     	; 0x9b2 <__stack+0xb3>
 9c8:	b3 14       	cp	r11, r3
 9ca:	10 f4       	brcc	.+4      	; 0x9d0 <__stack+0xd1>
 9cc:	3b 18       	sub	r3, r11
 9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <__stack+0xd3>
 9d0:	31 2c       	mov	r3, r1
 9d2:	34 ff       	sbrs	r19, 4
 9d4:	12 c0       	rjmp	.+36     	; 0x9fa <__stack+0xfb>
 9d6:	b7 01       	movw	r22, r14
 9d8:	80 e3       	ldi	r24, 0x30	; 48
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	3c 87       	std	Y+12, r19	; 0x0c
 9de:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 9e2:	3c 85       	ldd	r19, Y+12	; 0x0c
 9e4:	32 ff       	sbrs	r19, 2
 9e6:	17 c0       	rjmp	.+46     	; 0xa16 <__stack+0x117>
 9e8:	31 fd       	sbrc	r19, 1
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0xf3>
 9ec:	88 e7       	ldi	r24, 0x78	; 120
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0xf7>
 9f2:	88 e5       	ldi	r24, 0x58	; 88
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	b7 01       	movw	r22, r14
 9f8:	0c c0       	rjmp	.+24     	; 0xa12 <__stack+0x113>
 9fa:	83 2f       	mov	r24, r19
 9fc:	86 78       	andi	r24, 0x86	; 134
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__stack+0x117>
 a00:	31 ff       	sbrs	r19, 1
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x109>
 a04:	8b e2       	ldi	r24, 0x2B	; 43
 a06:	01 c0       	rjmp	.+2      	; 0xa0a <__stack+0x10b>
 a08:	80 e2       	ldi	r24, 0x20	; 32
 a0a:	37 fd       	sbrc	r19, 7
 a0c:	8d e2       	ldi	r24, 0x2D	; 45
 a0e:	b7 01       	movw	r22, r14
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a16:	a5 14       	cp	r10, r5
 a18:	38 f4       	brcc	.+14     	; 0xa28 <__stack+0x129>
 a1a:	b7 01       	movw	r22, r14
 a1c:	80 e3       	ldi	r24, 0x30	; 48
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a24:	5a 94       	dec	r5
 a26:	f7 cf       	rjmp	.-18     	; 0xa16 <__stack+0x117>
 a28:	aa 94       	dec	r10
 a2a:	f4 01       	movw	r30, r8
 a2c:	ea 0d       	add	r30, r10
 a2e:	f1 1d       	adc	r31, r1
 a30:	80 81       	ld	r24, Z
 a32:	b7 01       	movw	r22, r14
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a3a:	a1 10       	cpse	r10, r1
 a3c:	f5 cf       	rjmp	.-22     	; 0xa28 <__stack+0x129>
 a3e:	33 20       	and	r3, r3
 a40:	09 f4       	brne	.+2      	; 0xa44 <__stack+0x145>
 a42:	51 ce       	rjmp	.-862    	; 0x6e6 <vfprintf+0x24>
 a44:	b7 01       	movw	r22, r14
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 49 05 	call	0xa92	; 0xa92 <fputc>
 a4e:	3a 94       	dec	r3
 a50:	f6 cf       	rjmp	.-20     	; 0xa3e <__stack+0x13f>
 a52:	f7 01       	movw	r30, r14
 a54:	86 81       	ldd	r24, Z+6	; 0x06
 a56:	97 81       	ldd	r25, Z+7	; 0x07
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <__stack+0x15f>
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	2c 96       	adiw	r28, 0x0c	; 12
 a60:	e2 e1       	ldi	r30, 0x12	; 18
 a62:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__epilogue_restores__>

00000a66 <strnlen_P>:
 a66:	fc 01       	movw	r30, r24
 a68:	05 90       	lpm	r0, Z+
 a6a:	61 50       	subi	r22, 0x01	; 1
 a6c:	70 40       	sbci	r23, 0x00	; 0
 a6e:	01 10       	cpse	r0, r1
 a70:	d8 f7       	brcc	.-10     	; 0xa68 <strnlen_P+0x2>
 a72:	80 95       	com	r24
 a74:	90 95       	com	r25
 a76:	8e 0f       	add	r24, r30
 a78:	9f 1f       	adc	r25, r31
 a7a:	08 95       	ret

00000a7c <strnlen>:
 a7c:	fc 01       	movw	r30, r24
 a7e:	61 50       	subi	r22, 0x01	; 1
 a80:	70 40       	sbci	r23, 0x00	; 0
 a82:	01 90       	ld	r0, Z+
 a84:	01 10       	cpse	r0, r1
 a86:	d8 f7       	brcc	.-10     	; 0xa7e <strnlen+0x2>
 a88:	80 95       	com	r24
 a8a:	90 95       	com	r25
 a8c:	8e 0f       	add	r24, r30
 a8e:	9f 1f       	adc	r25, r31
 a90:	08 95       	ret

00000a92 <fputc>:
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	fb 01       	movw	r30, r22
 a9c:	23 81       	ldd	r18, Z+3	; 0x03
 a9e:	21 fd       	sbrc	r18, 1
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <fputc+0x16>
 aa2:	8f ef       	ldi	r24, 0xFF	; 255
 aa4:	9f ef       	ldi	r25, 0xFF	; 255
 aa6:	28 c0       	rjmp	.+80     	; 0xaf8 <fputc+0x66>
 aa8:	22 ff       	sbrs	r18, 2
 aaa:	16 c0       	rjmp	.+44     	; 0xad8 <fputc+0x46>
 aac:	46 81       	ldd	r20, Z+6	; 0x06
 aae:	57 81       	ldd	r21, Z+7	; 0x07
 ab0:	24 81       	ldd	r18, Z+4	; 0x04
 ab2:	35 81       	ldd	r19, Z+5	; 0x05
 ab4:	42 17       	cp	r20, r18
 ab6:	53 07       	cpc	r21, r19
 ab8:	44 f4       	brge	.+16     	; 0xaca <fputc+0x38>
 aba:	a0 81       	ld	r26, Z
 abc:	b1 81       	ldd	r27, Z+1	; 0x01
 abe:	9d 01       	movw	r18, r26
 ac0:	2f 5f       	subi	r18, 0xFF	; 255
 ac2:	3f 4f       	sbci	r19, 0xFF	; 255
 ac4:	31 83       	std	Z+1, r19	; 0x01
 ac6:	20 83       	st	Z, r18
 ac8:	8c 93       	st	X, r24
 aca:	26 81       	ldd	r18, Z+6	; 0x06
 acc:	37 81       	ldd	r19, Z+7	; 0x07
 ace:	2f 5f       	subi	r18, 0xFF	; 255
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	37 83       	std	Z+7, r19	; 0x07
 ad4:	26 83       	std	Z+6, r18	; 0x06
 ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <fputc+0x66>
 ad8:	eb 01       	movw	r28, r22
 ada:	09 2f       	mov	r16, r25
 adc:	18 2f       	mov	r17, r24
 ade:	00 84       	ldd	r0, Z+8	; 0x08
 ae0:	f1 85       	ldd	r31, Z+9	; 0x09
 ae2:	e0 2d       	mov	r30, r0
 ae4:	09 95       	icall
 ae6:	89 2b       	or	r24, r25
 ae8:	e1 f6       	brne	.-72     	; 0xaa2 <fputc+0x10>
 aea:	8e 81       	ldd	r24, Y+6	; 0x06
 aec:	9f 81       	ldd	r25, Y+7	; 0x07
 aee:	01 96       	adiw	r24, 0x01	; 1
 af0:	9f 83       	std	Y+7, r25	; 0x07
 af2:	8e 83       	std	Y+6, r24	; 0x06
 af4:	81 2f       	mov	r24, r17
 af6:	90 2f       	mov	r25, r16
 af8:	df 91       	pop	r29
 afa:	cf 91       	pop	r28
 afc:	1f 91       	pop	r17
 afe:	0f 91       	pop	r16
 b00:	08 95       	ret

00000b02 <__ultoa_invert>:
 b02:	fa 01       	movw	r30, r20
 b04:	aa 27       	eor	r26, r26
 b06:	28 30       	cpi	r18, 0x08	; 8
 b08:	51 f1       	breq	.+84     	; 0xb5e <__ultoa_invert+0x5c>
 b0a:	20 31       	cpi	r18, 0x10	; 16
 b0c:	81 f1       	breq	.+96     	; 0xb6e <__ultoa_invert+0x6c>
 b0e:	e8 94       	clt
 b10:	6f 93       	push	r22
 b12:	6e 7f       	andi	r22, 0xFE	; 254
 b14:	6e 5f       	subi	r22, 0xFE	; 254
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	8f 4f       	sbci	r24, 0xFF	; 255
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	af 4f       	sbci	r26, 0xFF	; 255
 b1e:	b1 e0       	ldi	r27, 0x01	; 1
 b20:	3e d0       	rcall	.+124    	; 0xb9e <__ultoa_invert+0x9c>
 b22:	b4 e0       	ldi	r27, 0x04	; 4
 b24:	3c d0       	rcall	.+120    	; 0xb9e <__ultoa_invert+0x9c>
 b26:	67 0f       	add	r22, r23
 b28:	78 1f       	adc	r23, r24
 b2a:	89 1f       	adc	r24, r25
 b2c:	9a 1f       	adc	r25, r26
 b2e:	a1 1d       	adc	r26, r1
 b30:	68 0f       	add	r22, r24
 b32:	79 1f       	adc	r23, r25
 b34:	8a 1f       	adc	r24, r26
 b36:	91 1d       	adc	r25, r1
 b38:	a1 1d       	adc	r26, r1
 b3a:	6a 0f       	add	r22, r26
 b3c:	71 1d       	adc	r23, r1
 b3e:	81 1d       	adc	r24, r1
 b40:	91 1d       	adc	r25, r1
 b42:	a1 1d       	adc	r26, r1
 b44:	20 d0       	rcall	.+64     	; 0xb86 <__ultoa_invert+0x84>
 b46:	09 f4       	brne	.+2      	; 0xb4a <__ultoa_invert+0x48>
 b48:	68 94       	set
 b4a:	3f 91       	pop	r19
 b4c:	2a e0       	ldi	r18, 0x0A	; 10
 b4e:	26 9f       	mul	r18, r22
 b50:	11 24       	eor	r1, r1
 b52:	30 19       	sub	r19, r0
 b54:	30 5d       	subi	r19, 0xD0	; 208
 b56:	31 93       	st	Z+, r19
 b58:	de f6       	brtc	.-74     	; 0xb10 <__ultoa_invert+0xe>
 b5a:	cf 01       	movw	r24, r30
 b5c:	08 95       	ret
 b5e:	46 2f       	mov	r20, r22
 b60:	47 70       	andi	r20, 0x07	; 7
 b62:	40 5d       	subi	r20, 0xD0	; 208
 b64:	41 93       	st	Z+, r20
 b66:	b3 e0       	ldi	r27, 0x03	; 3
 b68:	0f d0       	rcall	.+30     	; 0xb88 <__ultoa_invert+0x86>
 b6a:	c9 f7       	brne	.-14     	; 0xb5e <__ultoa_invert+0x5c>
 b6c:	f6 cf       	rjmp	.-20     	; 0xb5a <__ultoa_invert+0x58>
 b6e:	46 2f       	mov	r20, r22
 b70:	4f 70       	andi	r20, 0x0F	; 15
 b72:	40 5d       	subi	r20, 0xD0	; 208
 b74:	4a 33       	cpi	r20, 0x3A	; 58
 b76:	18 f0       	brcs	.+6      	; 0xb7e <__ultoa_invert+0x7c>
 b78:	49 5d       	subi	r20, 0xD9	; 217
 b7a:	31 fd       	sbrc	r19, 1
 b7c:	40 52       	subi	r20, 0x20	; 32
 b7e:	41 93       	st	Z+, r20
 b80:	02 d0       	rcall	.+4      	; 0xb86 <__ultoa_invert+0x84>
 b82:	a9 f7       	brne	.-22     	; 0xb6e <__ultoa_invert+0x6c>
 b84:	ea cf       	rjmp	.-44     	; 0xb5a <__ultoa_invert+0x58>
 b86:	b4 e0       	ldi	r27, 0x04	; 4
 b88:	a6 95       	lsr	r26
 b8a:	97 95       	ror	r25
 b8c:	87 95       	ror	r24
 b8e:	77 95       	ror	r23
 b90:	67 95       	ror	r22
 b92:	ba 95       	dec	r27
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__ultoa_invert+0x86>
 b96:	00 97       	sbiw	r24, 0x00	; 0
 b98:	61 05       	cpc	r22, r1
 b9a:	71 05       	cpc	r23, r1
 b9c:	08 95       	ret
 b9e:	9b 01       	movw	r18, r22
 ba0:	ac 01       	movw	r20, r24
 ba2:	0a 2e       	mov	r0, r26
 ba4:	06 94       	lsr	r0
 ba6:	57 95       	ror	r21
 ba8:	47 95       	ror	r20
 baa:	37 95       	ror	r19
 bac:	27 95       	ror	r18
 bae:	ba 95       	dec	r27
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__ultoa_invert+0xa2>
 bb2:	62 0f       	add	r22, r18
 bb4:	73 1f       	adc	r23, r19
 bb6:	84 1f       	adc	r24, r20
 bb8:	95 1f       	adc	r25, r21
 bba:	a0 1d       	adc	r26, r0
 bbc:	08 95       	ret

00000bbe <__prologue_saves__>:
 bbe:	2f 92       	push	r2
 bc0:	3f 92       	push	r3
 bc2:	4f 92       	push	r4
 bc4:	5f 92       	push	r5
 bc6:	6f 92       	push	r6
 bc8:	7f 92       	push	r7
 bca:	8f 92       	push	r8
 bcc:	9f 92       	push	r9
 bce:	af 92       	push	r10
 bd0:	bf 92       	push	r11
 bd2:	cf 92       	push	r12
 bd4:	df 92       	push	r13
 bd6:	ef 92       	push	r14
 bd8:	ff 92       	push	r15
 bda:	0f 93       	push	r16
 bdc:	1f 93       	push	r17
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	cd b7       	in	r28, 0x3d	; 61
 be4:	de b7       	in	r29, 0x3e	; 62
 be6:	ca 1b       	sub	r28, r26
 be8:	db 0b       	sbc	r29, r27
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	f8 94       	cli
 bee:	de bf       	out	0x3e, r29	; 62
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	cd bf       	out	0x3d, r28	; 61
 bf4:	09 94       	ijmp

00000bf6 <__epilogue_restores__>:
 bf6:	2a 88       	ldd	r2, Y+18	; 0x12
 bf8:	39 88       	ldd	r3, Y+17	; 0x11
 bfa:	48 88       	ldd	r4, Y+16	; 0x10
 bfc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfe:	6e 84       	ldd	r6, Y+14	; 0x0e
 c00:	7d 84       	ldd	r7, Y+13	; 0x0d
 c02:	8c 84       	ldd	r8, Y+12	; 0x0c
 c04:	9b 84       	ldd	r9, Y+11	; 0x0b
 c06:	aa 84       	ldd	r10, Y+10	; 0x0a
 c08:	b9 84       	ldd	r11, Y+9	; 0x09
 c0a:	c8 84       	ldd	r12, Y+8	; 0x08
 c0c:	df 80       	ldd	r13, Y+7	; 0x07
 c0e:	ee 80       	ldd	r14, Y+6	; 0x06
 c10:	fd 80       	ldd	r15, Y+5	; 0x05
 c12:	0c 81       	ldd	r16, Y+4	; 0x04
 c14:	1b 81       	ldd	r17, Y+3	; 0x03
 c16:	aa 81       	ldd	r26, Y+2	; 0x02
 c18:	b9 81       	ldd	r27, Y+1	; 0x01
 c1a:	ce 0f       	add	r28, r30
 c1c:	d1 1d       	adc	r29, r1
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61
 c28:	ed 01       	movw	r28, r26
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
