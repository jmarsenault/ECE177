
lab 9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000c38  00000ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800140  00800140  00000d0c  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007d  00000000  00000000  00002851  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000050  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000606  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000022c  00000000  00000000  00002f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000001b4  00000000  00000000  00003192  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000f4  00000000  00000000  00003348  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001ff  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000004fb  00000000  00000000  0000363b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000040  00000000  00000000  00003b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e3       	ldi	r30, 0x38	; 56
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 34       	cpi	r26, 0x40	; 64
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e4       	ldi	r26, 0x40	; 64
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 34       	cpi	r26, 0x47	; 71
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 34 01 	call	0x268	; 0x268 <main>
  b2:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <getkey>:
	}

}

// getkey(), mapkey(), getpw(), compareArrays() and mydelayms() functions here
signed char getkey(){
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	int i;
	int k;
	int mask = 0x10;
  be:	e0 e1       	ldi	r30, 0x10	; 16
  c0:	f0 e0       	ldi	r31, 0x00	; 0
	int mask2 = 0x01;
	
	for (i = 0; i < 4; i++) {
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
		
		mask <<= 1;
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
			if (PINA & mask2) {
  c6:	d1 e0       	ldi	r29, 0x01	; 1
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	b2 e0       	ldi	r27, 0x02	; 2
  cc:	a0 e0       	ldi	r26, 0x00	; 0
	int k;
	int mask = 0x10;
	int mask2 = 0x01;
	
	for (i = 0; i < 4; i++) {
		DDRA = mask;
  ce:	e1 b9       	out	0x01, r30	; 1
		PORTA = mask;
  d0:	e2 b9       	out	0x02, r30	; 2
		
		mask <<= 1;
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
			if (PINA & mask2) {
  d6:	00 99       	sbic	0x00, 0	; 0
  d8:	0b c0       	rjmp	.+22     	; 0xf0 <getkey+0x36>
  da:	4d 2f       	mov	r20, r29
  dc:	5c 2f       	mov	r21, r28
  de:	6b 2f       	mov	r22, r27
  e0:	7a 2f       	mov	r23, r26
  e2:	20 b1       	in	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	26 23       	and	r18, r22
  e8:	37 23       	and	r19, r23
  ea:	23 2b       	or	r18, r19
  ec:	39 f0       	breq	.+14     	; 0xfc <getkey+0x42>
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <getkey+0x3a>
		PORTA = mask;
		
		mask <<= 1;
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
			if (PINA & mask2) {
				return (4 * i + k);
  f4:	88 0f       	add	r24, r24
  f6:	88 0f       	add	r24, r24
  f8:	84 0f       	add	r24, r20
  fa:	0c c0       	rjmp	.+24     	; 0x114 <getkey+0x5a>
			}
			mask2 <<= 1;
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
		PORTA = mask;
		
		mask <<= 1;
		
		int mask2 = 0x01;
		for (k = 0; k < 4; k++) {
 100:	4f 5f       	subi	r20, 0xFF	; 255
 102:	5f 4f       	sbci	r21, 0xFF	; 255
 104:	44 30       	cpi	r20, 0x04	; 4
 106:	51 05       	cpc	r21, r1
 108:	61 f7       	brne	.-40     	; 0xe2 <getkey+0x28>
	int i;
	int k;
	int mask = 0x10;
	int mask2 = 0x01;
	
	for (i = 0; i < 4; i++) {
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	91 05       	cpc	r25, r1
 110:	f1 f6       	brne	.-68     	; 0xce <getkey+0x14>
				return (4 * i + k);
			}
			mask2 <<= 1;
		}
	}
	return (-1);
 112:	8f ef       	ldi	r24, 0xFF	; 255
	
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <mapkey>:

signed char mapkey (signed char key) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	60 97       	sbiw	r28, 0x10	; 16
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
	if (key > 15 || key < 0) {
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	98 f4       	brcc	.+38     	; 0x158 <mapkey+0x3e>
		return (-1);
	}
	else {
		unsigned char map[] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
 132:	90 e1       	ldi	r25, 0x10	; 16
 134:	ee e0       	ldi	r30, 0x0E	; 14
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	9a 95       	dec	r25
 142:	e1 f7       	brne	.-8      	; 0x13c <mapkey+0x22>
		return map[key];
 144:	e1 e0       	ldi	r30, 0x01	; 1
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	e8 0f       	add	r30, r24
 14e:	f1 1d       	adc	r31, r1
 150:	87 fd       	sbrc	r24, 7
 152:	fa 95       	dec	r31
 154:	80 81       	ld	r24, Z
 156:	01 c0       	rjmp	.+2      	; 0x15a <mapkey+0x40>
	
}

signed char mapkey (signed char key) {
	if (key > 15 || key < 0) {
		return (-1);
 158:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else {
		unsigned char map[] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
		return map[key];
	}
}
 15a:	60 96       	adiw	r28, 0x10	; 16
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <getpw>:
		else if (key == '#') {
			return result;
		}
	}
}
char getpw(char maxSize, char buffer[]) {
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7b 01       	movw	r14, r22

	char key;
	int i = 0;
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
		do {
		} while (getkey() != -1);
		do {
		} while ((key = mapkey(getkey())) == -1);

		if (key >= 0 && key <= 13 && i < maxSize) {
 17e:	08 2f       	mov	r16, r24
 180:	10 e0       	ldi	r17, 0x00	; 0
	int i = 0;


	do {
		do {
		} while (getkey() != -1);
 182:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 186:	8f 3f       	cpi	r24, 0xFF	; 255
 188:	e1 f7       	brne	.-8      	; 0x182 <getpw+0x16>
		do {
		} while ((key = mapkey(getkey())) == -1);
 18a:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <mapkey>

		if (key >= 0 && key <= 13 && i < maxSize) {
 192:	8e 30       	cpi	r24, 0x0E	; 14
 194:	48 f4       	brcc	.+18     	; 0x1a8 <getpw+0x3c>
 196:	c0 17       	cp	r28, r16
 198:	d1 07       	cpc	r29, r17
 19a:	34 f4       	brge	.+12     	; 0x1a8 <getpw+0x3c>
			buffer[i] = key;
 19c:	f7 01       	movw	r30, r14
 19e:	ec 0f       	add	r30, r28
 1a0:	fd 1f       	adc	r31, r29
 1a2:	80 83       	st	Z, r24
			i += 1;
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <getpw+0x4a>
		}
		else if (key == '*') {
 1a8:	8a 32       	cpi	r24, 0x2A	; 42
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <getpw+0x4a>
			if (i > 0) {
 1ac:	1c 16       	cp	r1, r28
 1ae:	1d 06       	cpc	r1, r29
 1b0:	44 f7       	brge	.-48     	; 0x182 <getpw+0x16>
				i -= 1;
 1b2:	21 97       	sbiw	r28, 0x01	; 1
 1b4:	e6 cf       	rjmp	.-52     	; 0x182 <getpw+0x16>
			}
		}
		
	} while (key != '#');
 1b6:	83 32       	cpi	r24, 0x23	; 35
 1b8:	21 f7       	brne	.-56     	; 0x182 <getpw+0x16>
	
	return i;

}
 1ba:	8c 2f       	mov	r24, r28
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <compareArrays>:

char compareArrays(char size, const char a1[], const char a2[]) {
	int i;
	for (i = 0; i < size; i++) {
 1ca:	88 23       	and	r24, r24
 1cc:	b1 f0       	breq	.+44     	; 0x1fa <compareArrays+0x30>
		
		if (a1[i] != a2[i]) {
 1ce:	fb 01       	movw	r30, r22
 1d0:	20 81       	ld	r18, Z
 1d2:	fa 01       	movw	r30, r20
 1d4:	90 81       	ld	r25, Z
 1d6:	29 13       	cpse	r18, r25
 1d8:	12 c0       	rjmp	.+36     	; 0x1fe <compareArrays+0x34>
 1da:	fb 01       	movw	r30, r22
 1dc:	31 96       	adiw	r30, 0x01	; 1
 1de:	da 01       	movw	r26, r20
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	68 0f       	add	r22, r24
 1e4:	71 1d       	adc	r23, r1
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <compareArrays+0x26>
 1e8:	91 91       	ld	r25, Z+
 1ea:	8d 91       	ld	r24, X+
 1ec:	98 13       	cpse	r25, r24
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <compareArrays+0x38>

}

char compareArrays(char size, const char a1[], const char a2[]) {
	int i;
	for (i = 0; i < size; i++) {
 1f0:	e6 17       	cp	r30, r22
 1f2:	f7 07       	cpc	r31, r23
 1f4:	c9 f7       	brne	.-14     	; 0x1e8 <compareArrays+0x1e>
		if (a1[i] != a2[i]) {
			return 0;
		}
		
	}
	return 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	08 95       	ret
char compareArrays(char size, const char a1[], const char a2[]) {
	int i;
	for (i = 0; i < size; i++) {
		
		if (a1[i] != a2[i]) {
			return 0;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return 1;
}
 204:	08 95       	ret

00000206 <mydelayms>:

void mydelayms(unsigned int ms){
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	00 d0       	rcall	.+0      	; 0x20c <mydelayms+0x6>
 20c:	00 d0       	rcall	.+0      	; 0x20e <mydelayms+0x8>
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	volatile int i,k;
	
	for(i=0;i<ms;i++){
 212:	1a 82       	std	Y+2, r1	; 0x02
 214:	19 82       	std	Y+1, r1	; 0x01
 216:	29 81       	ldd	r18, Y+1	; 0x01
 218:	3a 81       	ldd	r19, Y+2	; 0x02
 21a:	28 17       	cp	r18, r24
 21c:	39 07       	cpc	r19, r25
 21e:	e8 f4       	brcc	.+58     	; 0x25a <mydelayms+0x54>
		for(k=0;k<75;k++){}
 220:	1c 82       	std	Y+4, r1	; 0x04
 222:	1b 82       	std	Y+3, r1	; 0x03
 224:	2b 81       	ldd	r18, Y+3	; 0x03
 226:	3c 81       	ldd	r19, Y+4	; 0x04
 228:	2b 34       	cpi	r18, 0x4B	; 75
 22a:	31 05       	cpc	r19, r1
 22c:	5c f4       	brge	.+22     	; 0x244 <mydelayms+0x3e>
 22e:	2b 81       	ldd	r18, Y+3	; 0x03
 230:	3c 81       	ldd	r19, Y+4	; 0x04
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	3c 83       	std	Y+4, r19	; 0x04
 238:	2b 83       	std	Y+3, r18	; 0x03
 23a:	2b 81       	ldd	r18, Y+3	; 0x03
 23c:	3c 81       	ldd	r19, Y+4	; 0x04
 23e:	2b 34       	cpi	r18, 0x4B	; 75
 240:	31 05       	cpc	r19, r1
 242:	ac f3       	brlt	.-22     	; 0x22e <mydelayms+0x28>
}

void mydelayms(unsigned int ms){
	volatile int i,k;
	
	for(i=0;i<ms;i++){
 244:	29 81       	ldd	r18, Y+1	; 0x01
 246:	3a 81       	ldd	r19, Y+2	; 0x02
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	3a 83       	std	Y+2, r19	; 0x02
 24e:	29 83       	std	Y+1, r18	; 0x01
 250:	29 81       	ldd	r18, Y+1	; 0x01
 252:	3a 81       	ldd	r19, Y+2	; 0x02
 254:	28 17       	cp	r18, r24
 256:	39 07       	cpc	r19, r25
 258:	18 f3       	brcs	.-58     	; 0x220 <mydelayms+0x1a>
		for(k=0;k<75;k++){}
	}
	
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <main>:
signed char mapkey(signed char key);
char getpw(char maxsize, char pw[]); 	// Input keys into the array
char compareArrays(char size, const char a1[], const char a2[]);
void mydelayms(unsigned int ms);

void main(void) {
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	61 97       	sbiw	r28, 0x11	; 17
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
	char passwd[] = {1};			// Set the password in your function
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
	//	DDRA = 0xF0; // While running the lower 4 bits of PORTA will be inputs and the
	// upper 4 bits will be outputs, but we'll make them outputs one at
	// a time, so we'll actually control the data direction in getkey(),
	// the keypad scanning routine.

	lcd_init();		// Init the LCD display
 280:	0e 94 28 02 	call	0x450	; 0x450 <lcd_init>
	stdout=&lcd_stdout;
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	90 93 44 01 	sts	0x0144, r25
 28c:	80 93 43 01 	sts	0x0143, r24
			mydelayms(2000);
			printf("\n \n \n \n \n \n \n \n");
		}
		
		else{
			printf("Error");
 290:	08 e2       	ldi	r16, 0x28	; 40
 292:	11 e0       	ldi	r17, 0x01	; 1
	stdout=&lcd_stdout;

	// Your main code here
	while(1){
		 char x;
		x = getpw(pwsize, pwbuff);
 294:	be 01       	movw	r22, r28
 296:	6e 5f       	subi	r22, 0xFE	; 254
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 b6 00 	call	0x16c	; 0x16c <getpw>
		
		if((x==pwsize)&&(compareArrays(pwsize,passwd,pwbuff)==1)){
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	b9 f4       	brne	.+46     	; 0x2d2 <main+0x6a>
 2a4:	ae 01       	movw	r20, r28
 2a6:	4e 5f       	subi	r20, 0xFE	; 254
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <compareArrays>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	69 f4       	brne	.+26     	; 0x2d2 <main+0x6a>
			printf("Open lock\n");
 2b8:	8e e1       	ldi	r24, 0x1E	; 30
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 35 03 	call	0x66a	; 0x66a <puts>
			mydelayms(2000);
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	0e 94 03 01 	call	0x206	; 0x206 <mydelayms>
			printf("\n \n \n \n \n \n \n \n");
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 35 03 	call	0x66a	; 0x66a <puts>
 2d0:	e1 cf       	rjmp	.-62     	; 0x294 <main+0x2c>
		}
		
		else{
			printf("Error");
 2d2:	1f 93       	push	r17
 2d4:	0f 93       	push	r16
 2d6:	0e 94 18 03 	call	0x630	; 0x630 <printf>
			mydelayms(500);
 2da:	84 ef       	ldi	r24, 0xF4	; 244
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 03 01 	call	0x206	; 0x206 <mydelayms>
			printf("\n");
 2e2:	8a e0       	ldi	r24, 0x0A	; 10
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 2e 03 	call	0x65c	; 0x65c <putchar>
			printf("Error");
 2ea:	1f 93       	push	r17
 2ec:	0f 93       	push	r16
 2ee:	0e 94 18 03 	call	0x630	; 0x630 <printf>
			mydelayms(500);
 2f2:	84 ef       	ldi	r24, 0xF4	; 244
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 03 01 	call	0x206	; 0x206 <mydelayms>
			printf("\n");
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 2e 03 	call	0x65c	; 0x65c <putchar>
			printf("Error");
 302:	1f 93       	push	r17
 304:	0f 93       	push	r16
 306:	0e 94 18 03 	call	0x630	; 0x630 <printf>
			mydelayms(500);
 30a:	84 ef       	ldi	r24, 0xF4	; 244
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 03 01 	call	0x206	; 0x206 <mydelayms>
			printf("\n");
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 2e 03 	call	0x65c	; 0x65c <putchar>
			printf("Error");
 31a:	1f 93       	push	r17
 31c:	0f 93       	push	r16
 31e:	0e 94 18 03 	call	0x630	; 0x630 <printf>
			mydelayms(500);
 322:	84 ef       	ldi	r24, 0xF4	; 244
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 03 01 	call	0x206	; 0x206 <mydelayms>
			printf("\n \n \n \n \n \n \n \n \n");
 32a:	8e e2       	ldi	r24, 0x2E	; 46
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 35 03 	call	0x66a	; 0x66a <puts>
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	ab cf       	rjmp	.-170    	; 0x294 <main+0x2c>

0000033e <lcd_clk>:
 33e:	47 9a       	sbi	0x08, 7	; 8
 340:	85 e0       	ldi	r24, 0x05	; 5
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <lcd_clk+0x4>
 346:	00 00       	nop
 348:	47 98       	cbi	0x08, 7	; 8
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_clk+0xe>
 350:	00 00       	nop
 352:	08 95       	ret

00000354 <lcd_busy_wait>:
 354:	84 b1       	in	r24, 0x04	; 4
 356:	80 7f       	andi	r24, 0xF0	; 240
 358:	84 b9       	out	0x04, r24	; 4
 35a:	95 b1       	in	r25, 0x05	; 5
 35c:	29 2f       	mov	r18, r25
 35e:	20 71       	andi	r18, 0x10	; 16
 360:	2c 98       	cbi	0x05, 4	; 5
 362:	46 9a       	sbi	0x08, 6	; 8
 364:	47 9a       	sbi	0x08, 7	; 8
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_busy_wait+0x14>
 36c:	00 00       	nop
 36e:	93 b1       	in	r25, 0x03	; 3
 370:	47 98       	cbi	0x08, 7	; 8
 372:	85 e0       	ldi	r24, 0x05	; 5
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <lcd_busy_wait+0x20>
 378:	00 00       	nop
 37a:	47 9a       	sbi	0x08, 7	; 8
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	8a 95       	dec	r24
 380:	f1 f7       	brne	.-4      	; 0x37e <lcd_busy_wait+0x2a>
 382:	00 00       	nop
 384:	83 b1       	in	r24, 0x03	; 3
 386:	92 95       	swap	r25
 388:	90 7f       	andi	r25, 0xF0	; 240
 38a:	8f 70       	andi	r24, 0x0F	; 15
 38c:	89 2b       	or	r24, r25
 38e:	47 98       	cbi	0x08, 7	; 8
 390:	95 e0       	ldi	r25, 0x05	; 5
 392:	9a 95       	dec	r25
 394:	f1 f7       	brne	.-4      	; 0x392 <lcd_busy_wait+0x3e>
 396:	00 00       	nop
 398:	87 fd       	sbrc	r24, 7
 39a:	e4 cf       	rjmp	.-56     	; 0x364 <lcd_busy_wait+0x10>
 39c:	46 98       	cbi	0x08, 6	; 8
 39e:	95 b1       	in	r25, 0x05	; 5
 3a0:	9f 7e       	andi	r25, 0xEF	; 239
 3a2:	92 2b       	or	r25, r18
 3a4:	95 b9       	out	0x05, r25	; 5
 3a6:	94 b1       	in	r25, 0x04	; 4
 3a8:	9f 60       	ori	r25, 0x0F	; 15
 3aa:	94 b9       	out	0x04, r25	; 4
 3ac:	08 95       	ret

000003ae <lcd_dread>:
 3ae:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_busy_wait>
 3b2:	84 b1       	in	r24, 0x04	; 4
 3b4:	80 7f       	andi	r24, 0xF0	; 240
 3b6:	84 b9       	out	0x04, r24	; 4
 3b8:	46 9a       	sbi	0x08, 6	; 8
 3ba:	47 9a       	sbi	0x08, 7	; 8
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_dread+0x10>
 3c2:	00 00       	nop
 3c4:	23 b1       	in	r18, 0x03	; 3
 3c6:	47 98       	cbi	0x08, 7	; 8
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcd_dread+0x1c>
 3ce:	00 00       	nop
 3d0:	47 9a       	sbi	0x08, 7	; 8
 3d2:	85 e0       	ldi	r24, 0x05	; 5
 3d4:	8a 95       	dec	r24
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_dread+0x26>
 3d8:	00 00       	nop
 3da:	93 b1       	in	r25, 0x03	; 3
 3dc:	22 95       	swap	r18
 3de:	20 7f       	andi	r18, 0xF0	; 240
 3e0:	89 2f       	mov	r24, r25
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	47 98       	cbi	0x08, 7	; 8
 3e6:	46 98       	cbi	0x08, 6	; 8
 3e8:	94 b1       	in	r25, 0x04	; 4
 3ea:	9f 60       	ori	r25, 0x0F	; 15
 3ec:	94 b9       	out	0x04, r25	; 4
 3ee:	82 2b       	or	r24, r18
 3f0:	08 95       	ret

000003f2 <lcd_dwrite>:
 3f2:	cf 93       	push	r28
 3f4:	c8 2f       	mov	r28, r24
 3f6:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_busy_wait>
 3fa:	95 b1       	in	r25, 0x05	; 5
 3fc:	8c 2f       	mov	r24, r28
 3fe:	82 95       	swap	r24
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	90 7f       	andi	r25, 0xF0	; 240
 404:	98 2b       	or	r25, r24
 406:	95 b9       	out	0x05, r25	; 5
 408:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 40c:	95 b1       	in	r25, 0x05	; 5
 40e:	8c 2f       	mov	r24, r28
 410:	8f 70       	andi	r24, 0x0F	; 15
 412:	90 7f       	andi	r25, 0xF0	; 240
 414:	89 2b       	or	r24, r25
 416:	85 b9       	out	0x05, r24	; 5
 418:	cf 91       	pop	r28
 41a:	0c 94 9f 01 	jmp	0x33e	; 0x33e <lcd_clk>

0000041e <lcd_iwrite>:
 41e:	cf 93       	push	r28
 420:	c8 2f       	mov	r28, r24
 422:	2c 98       	cbi	0x05, 4	; 5
 424:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_busy_wait>
 428:	95 b1       	in	r25, 0x05	; 5
 42a:	8c 2f       	mov	r24, r28
 42c:	82 95       	swap	r24
 42e:	8f 70       	andi	r24, 0x0F	; 15
 430:	90 7f       	andi	r25, 0xF0	; 240
 432:	98 2b       	or	r25, r24
 434:	95 b9       	out	0x05, r25	; 5
 436:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 43a:	95 b1       	in	r25, 0x05	; 5
 43c:	8c 2f       	mov	r24, r28
 43e:	8f 70       	andi	r24, 0x0F	; 15
 440:	90 7f       	andi	r25, 0xF0	; 240
 442:	89 2b       	or	r24, r25
 444:	85 b9       	out	0x05, r24	; 5
 446:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 44a:	2c 9a       	sbi	0x05, 4	; 5
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <lcd_init>:
 450:	85 b1       	in	r24, 0x05	; 5
 452:	80 7e       	andi	r24, 0xE0	; 224
 454:	85 b9       	out	0x05, r24	; 5
 456:	2c 98       	cbi	0x05, 4	; 5
 458:	46 98       	cbi	0x08, 6	; 8
 45a:	47 98       	cbi	0x08, 7	; 8
 45c:	84 b1       	in	r24, 0x04	; 4
 45e:	8f 61       	ori	r24, 0x1F	; 31
 460:	84 b9       	out	0x04, r24	; 4
 462:	87 b1       	in	r24, 0x07	; 7
 464:	80 6c       	ori	r24, 0xC0	; 192
 466:	87 b9       	out	0x07, r24	; 7
 468:	8f e5       	ldi	r24, 0x5F	; 95
 46a:	9a ee       	ldi	r25, 0xEA	; 234
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_init+0x1c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <lcd_init+0x22>
 472:	00 00       	nop
 474:	85 b1       	in	r24, 0x05	; 5
 476:	80 7f       	andi	r24, 0xF0	; 240
 478:	83 60       	ori	r24, 0x03	; 3
 47a:	85 b9       	out	0x05, r24	; 5
 47c:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	90 e2       	ldi	r25, 0x20	; 32
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <lcd_init+0x34>
 488:	00 c0       	rjmp	.+0      	; 0x48a <lcd_init+0x3a>
 48a:	00 00       	nop
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	80 7f       	andi	r24, 0xF0	; 240
 490:	83 60       	ori	r24, 0x03	; 3
 492:	85 b9       	out	0x05, r24	; 5
 494:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 498:	87 ec       	ldi	r24, 0xC7	; 199
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <lcd_init+0x4c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <lcd_init+0x52>
 4a2:	00 00       	nop
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	80 7f       	andi	r24, 0xF0	; 240
 4a8:	83 60       	ori	r24, 0x03	; 3
 4aa:	85 b9       	out	0x05, r24	; 5
 4ac:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 4b0:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_busy_wait>
 4b4:	85 b1       	in	r24, 0x05	; 5
 4b6:	80 7f       	andi	r24, 0xF0	; 240
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	85 b9       	out	0x05, r24	; 5
 4bc:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_clk>
 4c0:	84 e2       	ldi	r24, 0x24	; 36
 4c2:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4c6:	8c e2       	ldi	r24, 0x2C	; 44
 4c8:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4d8:	86 e0       	ldi	r24, 0x06	; 6
 4da:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4de:	8f e0       	ldi	r24, 0x0F	; 15
 4e0:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4e4:	80 ed       	ldi	r24, 0xD0	; 208
 4e6:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 4ea:	2c 9a       	sbi	0x05, 4	; 5
 4ec:	08 95       	ret

000004ee <lcd_putc>:
 4ee:	3f 92       	push	r3
 4f0:	4f 92       	push	r4
 4f2:	5f 92       	push	r5
 4f4:	6f 92       	push	r6
 4f6:	7f 92       	push	r7
 4f8:	8f 92       	push	r8
 4fa:	9f 92       	push	r9
 4fc:	af 92       	push	r10
 4fe:	bf 92       	push	r11
 500:	cf 92       	push	r12
 502:	df 92       	push	r13
 504:	ef 92       	push	r14
 506:	ff 92       	push	r15
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	e0 97       	sbiw	r28, 0x30	; 48
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
 520:	8a 30       	cpi	r24, 0x0A	; 10
 522:	09 f4       	brne	.+2      	; 0x526 <lcd_putc+0x38>
 524:	81 c0       	rjmp	.+258    	; 0x628 <lcd_putc+0x13a>
 526:	38 2e       	mov	r3, r24
 528:	80 91 40 01 	lds	r24, 0x0140
 52c:	81 11       	cpse	r24, r1
 52e:	1d c0       	rjmp	.+58     	; 0x56a <lcd_putc+0x7c>
 530:	83 2d       	mov	r24, r3
 532:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_dwrite>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	e0 96       	adiw	r28, 0x30	; 48
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	bf 90       	pop	r11
 558:	af 90       	pop	r10
 55a:	9f 90       	pop	r9
 55c:	8f 90       	pop	r8
 55e:	7f 90       	pop	r7
 560:	6f 90       	pop	r6
 562:	5f 90       	pop	r5
 564:	4f 90       	pop	r4
 566:	3f 90       	pop	r3
 568:	08 95       	ret
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 570:	8e 01       	movw	r16, r28
 572:	0f 5f       	subi	r16, 0xFF	; 255
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	4e 01       	movw	r8, r28
 578:	81 e1       	ldi	r24, 0x11	; 17
 57a:	88 0e       	add	r8, r24
 57c:	91 1c       	adc	r9, r1
 57e:	78 01       	movw	r14, r16
 580:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_dread>
 584:	f7 01       	movw	r30, r14
 586:	81 93       	st	Z+, r24
 588:	7f 01       	movw	r14, r30
 58a:	e8 15       	cp	r30, r8
 58c:	f9 05       	cpc	r31, r9
 58e:	c1 f7       	brne	.-16     	; 0x580 <lcd_putc+0x92>
 590:	80 e9       	ldi	r24, 0x90	; 144
 592:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 596:	64 01       	movw	r12, r8
 598:	5e 01       	movw	r10, r28
 59a:	f1 e2       	ldi	r31, 0x21	; 33
 59c:	af 0e       	add	r10, r31
 59e:	b1 1c       	adc	r11, r1
 5a0:	74 01       	movw	r14, r8
 5a2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_dread>
 5a6:	f7 01       	movw	r30, r14
 5a8:	81 93       	st	Z+, r24
 5aa:	7f 01       	movw	r14, r30
 5ac:	ea 15       	cp	r30, r10
 5ae:	fb 05       	cpc	r31, r11
 5b0:	c1 f7       	brne	.-16     	; 0x5a2 <lcd_putc+0xb4>
 5b2:	80 ed       	ldi	r24, 0xD0	; 208
 5b4:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 5b8:	75 01       	movw	r14, r10
 5ba:	3e 01       	movw	r6, r28
 5bc:	f1 e3       	ldi	r31, 0x31	; 49
 5be:	6f 0e       	add	r6, r31
 5c0:	71 1c       	adc	r7, r1
 5c2:	25 01       	movw	r4, r10
 5c4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_dread>
 5c8:	f2 01       	movw	r30, r4
 5ca:	81 93       	st	Z+, r24
 5cc:	2f 01       	movw	r4, r30
 5ce:	e6 15       	cp	r30, r6
 5d0:	f7 05       	cpc	r31, r7
 5d2:	c1 f7       	brne	.-16     	; 0x5c4 <lcd_putc+0xd6>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 5e0:	f8 01       	movw	r30, r16
 5e2:	81 91       	ld	r24, Z+
 5e4:	8f 01       	movw	r16, r30
 5e6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_dwrite>
 5ea:	80 16       	cp	r8, r16
 5ec:	91 06       	cpc	r9, r17
 5ee:	c1 f7       	brne	.-16     	; 0x5e0 <lcd_putc+0xf2>
 5f0:	80 ec       	ldi	r24, 0xC0	; 192
 5f2:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 5f6:	f6 01       	movw	r30, r12
 5f8:	81 91       	ld	r24, Z+
 5fa:	6f 01       	movw	r12, r30
 5fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_dwrite>
 600:	ac 14       	cp	r10, r12
 602:	bd 04       	cpc	r11, r13
 604:	c1 f7       	brne	.-16     	; 0x5f6 <lcd_putc+0x108>
 606:	80 e9       	ldi	r24, 0x90	; 144
 608:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 60c:	f7 01       	movw	r30, r14
 60e:	81 91       	ld	r24, Z+
 610:	7f 01       	movw	r14, r30
 612:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_dwrite>
 616:	6e 14       	cp	r6, r14
 618:	7f 04       	cpc	r7, r15
 61a:	c1 f7       	brne	.-16     	; 0x60c <lcd_putc+0x11e>
 61c:	80 ed       	ldi	r24, 0xD0	; 208
 61e:	0e 94 0f 02 	call	0x41e	; 0x41e <lcd_iwrite>
 622:	10 92 40 01 	sts	0x0140, r1
 626:	84 cf       	rjmp	.-248    	; 0x530 <lcd_putc+0x42>
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 40 01 	sts	0x0140, r24
 62e:	83 cf       	rjmp	.-250    	; 0x536 <lcd_putc+0x48>

00000630 <printf>:
 630:	a0 e0       	ldi	r26, 0x00	; 0
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	ee e1       	ldi	r30, 0x1E	; 30
 636:	f3 e0       	ldi	r31, 0x03	; 3
 638:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__prologue_saves__+0x20>
 63c:	ae 01       	movw	r20, r28
 63e:	4b 5f       	subi	r20, 0xFB	; 251
 640:	5f 4f       	sbci	r21, 0xFF	; 255
 642:	fa 01       	movw	r30, r20
 644:	61 91       	ld	r22, Z+
 646:	71 91       	ld	r23, Z+
 648:	af 01       	movw	r20, r30
 64a:	80 91 43 01 	lds	r24, 0x0143
 64e:	90 91 44 01 	lds	r25, 0x0144
 652:	0e 94 65 03 	call	0x6ca	; 0x6ca <vfprintf>
 656:	e2 e0       	ldi	r30, 0x02	; 2
 658:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__epilogue_restores__+0x20>

0000065c <putchar>:
 65c:	60 91 43 01 	lds	r22, 0x0143
 660:	70 91 44 01 	lds	r23, 0x0144
 664:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 668:	08 95       	ret

0000066a <puts>:
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	e0 91 43 01 	lds	r30, 0x0143
 676:	f0 91 44 01 	lds	r31, 0x0144
 67a:	23 81       	ldd	r18, Z+3	; 0x03
 67c:	21 ff       	sbrs	r18, 1
 67e:	1b c0       	rjmp	.+54     	; 0x6b6 <puts+0x4c>
 680:	8c 01       	movw	r16, r24
 682:	d0 e0       	ldi	r29, 0x00	; 0
 684:	c0 e0       	ldi	r28, 0x00	; 0
 686:	f8 01       	movw	r30, r16
 688:	81 91       	ld	r24, Z+
 68a:	8f 01       	movw	r16, r30
 68c:	60 91 43 01 	lds	r22, 0x0143
 690:	70 91 44 01 	lds	r23, 0x0144
 694:	db 01       	movw	r26, r22
 696:	18 96       	adiw	r26, 0x08	; 8
 698:	ed 91       	ld	r30, X+
 69a:	fc 91       	ld	r31, X
 69c:	19 97       	sbiw	r26, 0x09	; 9
 69e:	88 23       	and	r24, r24
 6a0:	31 f0       	breq	.+12     	; 0x6ae <puts+0x44>
 6a2:	09 95       	icall
 6a4:	89 2b       	or	r24, r25
 6a6:	79 f3       	breq	.-34     	; 0x686 <puts+0x1c>
 6a8:	df ef       	ldi	r29, 0xFF	; 255
 6aa:	cf ef       	ldi	r28, 0xFF	; 255
 6ac:	ec cf       	rjmp	.-40     	; 0x686 <puts+0x1c>
 6ae:	8a e0       	ldi	r24, 0x0A	; 10
 6b0:	09 95       	icall
 6b2:	89 2b       	or	r24, r25
 6b4:	19 f0       	breq	.+6      	; 0x6bc <puts+0x52>
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	9f ef       	ldi	r25, 0xFF	; 255
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <puts+0x56>
 6bc:	8d 2f       	mov	r24, r29
 6be:	9c 2f       	mov	r25, r28
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <vfprintf>:
 6ca:	ac e0       	ldi	r26, 0x0C	; 12
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	eb e6       	ldi	r30, 0x6B	; 107
 6d0:	f3 e0       	ldi	r31, 0x03	; 3
 6d2:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__prologue_saves__>
 6d6:	7c 01       	movw	r14, r24
 6d8:	6b 01       	movw	r12, r22
 6da:	8a 01       	movw	r16, r20
 6dc:	fc 01       	movw	r30, r24
 6de:	17 82       	std	Z+7, r1	; 0x07
 6e0:	16 82       	std	Z+6, r1	; 0x06
 6e2:	83 81       	ldd	r24, Z+3	; 0x03
 6e4:	81 ff       	sbrs	r24, 1
 6e6:	bd c1       	rjmp	.+890    	; 0xa62 <__stack+0x163>
 6e8:	ce 01       	movw	r24, r28
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	4c 01       	movw	r8, r24
 6ee:	f7 01       	movw	r30, r14
 6f0:	93 81       	ldd	r25, Z+3	; 0x03
 6f2:	f6 01       	movw	r30, r12
 6f4:	93 fd       	sbrc	r25, 3
 6f6:	85 91       	lpm	r24, Z+
 6f8:	93 ff       	sbrs	r25, 3
 6fa:	81 91       	ld	r24, Z+
 6fc:	6f 01       	movw	r12, r30
 6fe:	88 23       	and	r24, r24
 700:	09 f4       	brne	.+2      	; 0x704 <vfprintf+0x3a>
 702:	ab c1       	rjmp	.+854    	; 0xa5a <__stack+0x15b>
 704:	85 32       	cpi	r24, 0x25	; 37
 706:	39 f4       	brne	.+14     	; 0x716 <vfprintf+0x4c>
 708:	93 fd       	sbrc	r25, 3
 70a:	85 91       	lpm	r24, Z+
 70c:	93 ff       	sbrs	r25, 3
 70e:	81 91       	ld	r24, Z+
 710:	6f 01       	movw	r12, r30
 712:	85 32       	cpi	r24, 0x25	; 37
 714:	29 f4       	brne	.+10     	; 0x720 <vfprintf+0x56>
 716:	b7 01       	movw	r22, r14
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 71e:	e7 cf       	rjmp	.-50     	; 0x6ee <vfprintf+0x24>
 720:	51 2c       	mov	r5, r1
 722:	31 2c       	mov	r3, r1
 724:	20 e0       	ldi	r18, 0x00	; 0
 726:	20 32       	cpi	r18, 0x20	; 32
 728:	a0 f4       	brcc	.+40     	; 0x752 <vfprintf+0x88>
 72a:	8b 32       	cpi	r24, 0x2B	; 43
 72c:	69 f0       	breq	.+26     	; 0x748 <vfprintf+0x7e>
 72e:	30 f4       	brcc	.+12     	; 0x73c <vfprintf+0x72>
 730:	80 32       	cpi	r24, 0x20	; 32
 732:	59 f0       	breq	.+22     	; 0x74a <vfprintf+0x80>
 734:	83 32       	cpi	r24, 0x23	; 35
 736:	69 f4       	brne	.+26     	; 0x752 <vfprintf+0x88>
 738:	20 61       	ori	r18, 0x10	; 16
 73a:	2c c0       	rjmp	.+88     	; 0x794 <vfprintf+0xca>
 73c:	8d 32       	cpi	r24, 0x2D	; 45
 73e:	39 f0       	breq	.+14     	; 0x74e <vfprintf+0x84>
 740:	80 33       	cpi	r24, 0x30	; 48
 742:	39 f4       	brne	.+14     	; 0x752 <vfprintf+0x88>
 744:	21 60       	ori	r18, 0x01	; 1
 746:	26 c0       	rjmp	.+76     	; 0x794 <vfprintf+0xca>
 748:	22 60       	ori	r18, 0x02	; 2
 74a:	24 60       	ori	r18, 0x04	; 4
 74c:	23 c0       	rjmp	.+70     	; 0x794 <vfprintf+0xca>
 74e:	28 60       	ori	r18, 0x08	; 8
 750:	21 c0       	rjmp	.+66     	; 0x794 <vfprintf+0xca>
 752:	27 fd       	sbrc	r18, 7
 754:	27 c0       	rjmp	.+78     	; 0x7a4 <vfprintf+0xda>
 756:	30 ed       	ldi	r19, 0xD0	; 208
 758:	38 0f       	add	r19, r24
 75a:	3a 30       	cpi	r19, 0x0A	; 10
 75c:	78 f4       	brcc	.+30     	; 0x77c <vfprintf+0xb2>
 75e:	26 ff       	sbrs	r18, 6
 760:	06 c0       	rjmp	.+12     	; 0x76e <vfprintf+0xa4>
 762:	fa e0       	ldi	r31, 0x0A	; 10
 764:	5f 9e       	mul	r5, r31
 766:	30 0d       	add	r19, r0
 768:	11 24       	eor	r1, r1
 76a:	53 2e       	mov	r5, r19
 76c:	13 c0       	rjmp	.+38     	; 0x794 <vfprintf+0xca>
 76e:	8a e0       	ldi	r24, 0x0A	; 10
 770:	38 9e       	mul	r3, r24
 772:	30 0d       	add	r19, r0
 774:	11 24       	eor	r1, r1
 776:	33 2e       	mov	r3, r19
 778:	20 62       	ori	r18, 0x20	; 32
 77a:	0c c0       	rjmp	.+24     	; 0x794 <vfprintf+0xca>
 77c:	8e 32       	cpi	r24, 0x2E	; 46
 77e:	21 f4       	brne	.+8      	; 0x788 <vfprintf+0xbe>
 780:	26 fd       	sbrc	r18, 6
 782:	6b c1       	rjmp	.+726    	; 0xa5a <__stack+0x15b>
 784:	20 64       	ori	r18, 0x40	; 64
 786:	06 c0       	rjmp	.+12     	; 0x794 <vfprintf+0xca>
 788:	8c 36       	cpi	r24, 0x6C	; 108
 78a:	11 f4       	brne	.+4      	; 0x790 <vfprintf+0xc6>
 78c:	20 68       	ori	r18, 0x80	; 128
 78e:	02 c0       	rjmp	.+4      	; 0x794 <vfprintf+0xca>
 790:	88 36       	cpi	r24, 0x68	; 104
 792:	41 f4       	brne	.+16     	; 0x7a4 <vfprintf+0xda>
 794:	f6 01       	movw	r30, r12
 796:	93 fd       	sbrc	r25, 3
 798:	85 91       	lpm	r24, Z+
 79a:	93 ff       	sbrs	r25, 3
 79c:	81 91       	ld	r24, Z+
 79e:	6f 01       	movw	r12, r30
 7a0:	81 11       	cpse	r24, r1
 7a2:	c1 cf       	rjmp	.-126    	; 0x726 <vfprintf+0x5c>
 7a4:	98 2f       	mov	r25, r24
 7a6:	9f 7d       	andi	r25, 0xDF	; 223
 7a8:	95 54       	subi	r25, 0x45	; 69
 7aa:	93 30       	cpi	r25, 0x03	; 3
 7ac:	28 f4       	brcc	.+10     	; 0x7b8 <vfprintf+0xee>
 7ae:	0c 5f       	subi	r16, 0xFC	; 252
 7b0:	1f 4f       	sbci	r17, 0xFF	; 255
 7b2:	ff e3       	ldi	r31, 0x3F	; 63
 7b4:	f9 83       	std	Y+1, r31	; 0x01
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <vfprintf+0x108>
 7b8:	83 36       	cpi	r24, 0x63	; 99
 7ba:	31 f0       	breq	.+12     	; 0x7c8 <vfprintf+0xfe>
 7bc:	83 37       	cpi	r24, 0x73	; 115
 7be:	71 f0       	breq	.+28     	; 0x7dc <vfprintf+0x112>
 7c0:	83 35       	cpi	r24, 0x53	; 83
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <vfprintf+0xfc>
 7c4:	5b c0       	rjmp	.+182    	; 0x87c <vfprintf+0x1b2>
 7c6:	22 c0       	rjmp	.+68     	; 0x80c <vfprintf+0x142>
 7c8:	f8 01       	movw	r30, r16
 7ca:	80 81       	ld	r24, Z
 7cc:	89 83       	std	Y+1, r24	; 0x01
 7ce:	0e 5f       	subi	r16, 0xFE	; 254
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	44 24       	eor	r4, r4
 7d4:	43 94       	inc	r4
 7d6:	51 2c       	mov	r5, r1
 7d8:	54 01       	movw	r10, r8
 7da:	15 c0       	rjmp	.+42     	; 0x806 <vfprintf+0x13c>
 7dc:	38 01       	movw	r6, r16
 7de:	f2 e0       	ldi	r31, 0x02	; 2
 7e0:	6f 0e       	add	r6, r31
 7e2:	71 1c       	adc	r7, r1
 7e4:	f8 01       	movw	r30, r16
 7e6:	a0 80       	ld	r10, Z
 7e8:	b1 80       	ldd	r11, Z+1	; 0x01
 7ea:	26 ff       	sbrs	r18, 6
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <vfprintf+0x12a>
 7ee:	65 2d       	mov	r22, r5
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x12e>
 7f4:	6f ef       	ldi	r22, 0xFF	; 255
 7f6:	7f ef       	ldi	r23, 0xFF	; 255
 7f8:	c5 01       	movw	r24, r10
 7fa:	2c 87       	std	Y+12, r18	; 0x0c
 7fc:	0e 94 42 05 	call	0xa84	; 0xa84 <strnlen>
 800:	2c 01       	movw	r4, r24
 802:	83 01       	movw	r16, r6
 804:	2c 85       	ldd	r18, Y+12	; 0x0c
 806:	2f 77       	andi	r18, 0x7F	; 127
 808:	22 2e       	mov	r2, r18
 80a:	17 c0       	rjmp	.+46     	; 0x83a <vfprintf+0x170>
 80c:	38 01       	movw	r6, r16
 80e:	f2 e0       	ldi	r31, 0x02	; 2
 810:	6f 0e       	add	r6, r31
 812:	71 1c       	adc	r7, r1
 814:	f8 01       	movw	r30, r16
 816:	a0 80       	ld	r10, Z
 818:	b1 80       	ldd	r11, Z+1	; 0x01
 81a:	26 ff       	sbrs	r18, 6
 81c:	03 c0       	rjmp	.+6      	; 0x824 <vfprintf+0x15a>
 81e:	65 2d       	mov	r22, r5
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <vfprintf+0x15e>
 824:	6f ef       	ldi	r22, 0xFF	; 255
 826:	7f ef       	ldi	r23, 0xFF	; 255
 828:	c5 01       	movw	r24, r10
 82a:	2c 87       	std	Y+12, r18	; 0x0c
 82c:	0e 94 37 05 	call	0xa6e	; 0xa6e <strnlen_P>
 830:	2c 01       	movw	r4, r24
 832:	2c 85       	ldd	r18, Y+12	; 0x0c
 834:	20 68       	ori	r18, 0x80	; 128
 836:	22 2e       	mov	r2, r18
 838:	83 01       	movw	r16, r6
 83a:	23 fc       	sbrc	r2, 3
 83c:	1b c0       	rjmp	.+54     	; 0x874 <vfprintf+0x1aa>
 83e:	83 2d       	mov	r24, r3
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	48 16       	cp	r4, r24
 844:	59 06       	cpc	r5, r25
 846:	b0 f4       	brcc	.+44     	; 0x874 <vfprintf+0x1aa>
 848:	b7 01       	movw	r22, r14
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 852:	3a 94       	dec	r3
 854:	f4 cf       	rjmp	.-24     	; 0x83e <vfprintf+0x174>
 856:	f5 01       	movw	r30, r10
 858:	27 fc       	sbrc	r2, 7
 85a:	85 91       	lpm	r24, Z+
 85c:	27 fe       	sbrs	r2, 7
 85e:	81 91       	ld	r24, Z+
 860:	5f 01       	movw	r10, r30
 862:	b7 01       	movw	r22, r14
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 86a:	31 10       	cpse	r3, r1
 86c:	3a 94       	dec	r3
 86e:	f1 e0       	ldi	r31, 0x01	; 1
 870:	4f 1a       	sub	r4, r31
 872:	51 08       	sbc	r5, r1
 874:	41 14       	cp	r4, r1
 876:	51 04       	cpc	r5, r1
 878:	71 f7       	brne	.-36     	; 0x856 <vfprintf+0x18c>
 87a:	e5 c0       	rjmp	.+458    	; 0xa46 <__stack+0x147>
 87c:	84 36       	cpi	r24, 0x64	; 100
 87e:	11 f0       	breq	.+4      	; 0x884 <vfprintf+0x1ba>
 880:	89 36       	cpi	r24, 0x69	; 105
 882:	39 f5       	brne	.+78     	; 0x8d2 <vfprintf+0x208>
 884:	f8 01       	movw	r30, r16
 886:	27 ff       	sbrs	r18, 7
 888:	07 c0       	rjmp	.+14     	; 0x898 <vfprintf+0x1ce>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	0c 5f       	subi	r16, 0xFC	; 252
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <vfprintf+0x1de>
 898:	60 81       	ld	r22, Z
 89a:	71 81       	ldd	r23, Z+1	; 0x01
 89c:	07 2e       	mov	r0, r23
 89e:	00 0c       	add	r0, r0
 8a0:	88 0b       	sbc	r24, r24
 8a2:	99 0b       	sbc	r25, r25
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	2f 76       	andi	r18, 0x6F	; 111
 8aa:	72 2e       	mov	r7, r18
 8ac:	97 ff       	sbrs	r25, 7
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <vfprintf+0x1f8>
 8b0:	90 95       	com	r25
 8b2:	80 95       	com	r24
 8b4:	70 95       	com	r23
 8b6:	61 95       	neg	r22
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	20 68       	ori	r18, 0x80	; 128
 8c0:	72 2e       	mov	r7, r18
 8c2:	2a e0       	ldi	r18, 0x0A	; 10
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	a4 01       	movw	r20, r8
 8c8:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 8cc:	a8 2e       	mov	r10, r24
 8ce:	a8 18       	sub	r10, r8
 8d0:	44 c0       	rjmp	.+136    	; 0x95a <__stack+0x5b>
 8d2:	85 37       	cpi	r24, 0x75	; 117
 8d4:	29 f4       	brne	.+10     	; 0x8e0 <vfprintf+0x216>
 8d6:	2f 7e       	andi	r18, 0xEF	; 239
 8d8:	b2 2e       	mov	r11, r18
 8da:	2a e0       	ldi	r18, 0x0A	; 10
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	25 c0       	rjmp	.+74     	; 0x92a <__stack+0x2b>
 8e0:	f2 2f       	mov	r31, r18
 8e2:	f9 7f       	andi	r31, 0xF9	; 249
 8e4:	bf 2e       	mov	r11, r31
 8e6:	8f 36       	cpi	r24, 0x6F	; 111
 8e8:	c1 f0       	breq	.+48     	; 0x91a <__stack+0x1b>
 8ea:	18 f4       	brcc	.+6      	; 0x8f2 <vfprintf+0x228>
 8ec:	88 35       	cpi	r24, 0x58	; 88
 8ee:	79 f0       	breq	.+30     	; 0x90e <__stack+0xf>
 8f0:	b4 c0       	rjmp	.+360    	; 0xa5a <__stack+0x15b>
 8f2:	80 37       	cpi	r24, 0x70	; 112
 8f4:	19 f0       	breq	.+6      	; 0x8fc <vfprintf+0x232>
 8f6:	88 37       	cpi	r24, 0x78	; 120
 8f8:	21 f0       	breq	.+8      	; 0x902 <__stack+0x3>
 8fa:	af c0       	rjmp	.+350    	; 0xa5a <__stack+0x15b>
 8fc:	2f 2f       	mov	r18, r31
 8fe:	20 61       	ori	r18, 0x10	; 16
 900:	b2 2e       	mov	r11, r18
 902:	b4 fe       	sbrs	r11, 4
 904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0x21>
 906:	8b 2d       	mov	r24, r11
 908:	84 60       	ori	r24, 0x04	; 4
 90a:	b8 2e       	mov	r11, r24
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__stack+0x21>
 90e:	24 ff       	sbrs	r18, 4
 910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0x27>
 912:	9f 2f       	mov	r25, r31
 914:	96 60       	ori	r25, 0x06	; 6
 916:	b9 2e       	mov	r11, r25
 918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
 91a:	28 e0       	ldi	r18, 0x08	; 8
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
 920:	20 e1       	ldi	r18, 0x10	; 16
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
 926:	20 e1       	ldi	r18, 0x10	; 16
 928:	32 e0       	ldi	r19, 0x02	; 2
 92a:	f8 01       	movw	r30, r16
 92c:	b7 fe       	sbrs	r11, 7
 92e:	07 c0       	rjmp	.+14     	; 0x93e <__stack+0x3f>
 930:	60 81       	ld	r22, Z
 932:	71 81       	ldd	r23, Z+1	; 0x01
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	0c 5f       	subi	r16, 0xFC	; 252
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	06 c0       	rjmp	.+12     	; 0x94a <__stack+0x4b>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 5f       	subi	r16, 0xFE	; 254
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	a4 01       	movw	r20, r8
 94c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 950:	a8 2e       	mov	r10, r24
 952:	a8 18       	sub	r10, r8
 954:	fb 2d       	mov	r31, r11
 956:	ff 77       	andi	r31, 0x7F	; 127
 958:	7f 2e       	mov	r7, r31
 95a:	76 fe       	sbrs	r7, 6
 95c:	0b c0       	rjmp	.+22     	; 0x974 <__stack+0x75>
 95e:	37 2d       	mov	r19, r7
 960:	3e 7f       	andi	r19, 0xFE	; 254
 962:	a5 14       	cp	r10, r5
 964:	50 f4       	brcc	.+20     	; 0x97a <__stack+0x7b>
 966:	74 fe       	sbrs	r7, 4
 968:	0a c0       	rjmp	.+20     	; 0x97e <__stack+0x7f>
 96a:	72 fc       	sbrc	r7, 2
 96c:	08 c0       	rjmp	.+16     	; 0x97e <__stack+0x7f>
 96e:	37 2d       	mov	r19, r7
 970:	3e 7e       	andi	r19, 0xEE	; 238
 972:	05 c0       	rjmp	.+10     	; 0x97e <__stack+0x7f>
 974:	ba 2c       	mov	r11, r10
 976:	37 2d       	mov	r19, r7
 978:	03 c0       	rjmp	.+6      	; 0x980 <__stack+0x81>
 97a:	ba 2c       	mov	r11, r10
 97c:	01 c0       	rjmp	.+2      	; 0x980 <__stack+0x81>
 97e:	b5 2c       	mov	r11, r5
 980:	34 ff       	sbrs	r19, 4
 982:	0d c0       	rjmp	.+26     	; 0x99e <__stack+0x9f>
 984:	fe 01       	movw	r30, r28
 986:	ea 0d       	add	r30, r10
 988:	f1 1d       	adc	r31, r1
 98a:	80 81       	ld	r24, Z
 98c:	80 33       	cpi	r24, 0x30	; 48
 98e:	11 f4       	brne	.+4      	; 0x994 <__stack+0x95>
 990:	39 7e       	andi	r19, 0xE9	; 233
 992:	09 c0       	rjmp	.+18     	; 0x9a6 <__stack+0xa7>
 994:	32 ff       	sbrs	r19, 2
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0xa5>
 998:	b3 94       	inc	r11
 99a:	b3 94       	inc	r11
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0xa7>
 99e:	83 2f       	mov	r24, r19
 9a0:	86 78       	andi	r24, 0x86	; 134
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0xa7>
 9a4:	b3 94       	inc	r11
 9a6:	33 fd       	sbrc	r19, 3
 9a8:	13 c0       	rjmp	.+38     	; 0x9d0 <__stack+0xd1>
 9aa:	30 ff       	sbrs	r19, 0
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__stack+0xbb>
 9ae:	5a 2c       	mov	r5, r10
 9b0:	b3 14       	cp	r11, r3
 9b2:	18 f4       	brcc	.+6      	; 0x9ba <__stack+0xbb>
 9b4:	53 0c       	add	r5, r3
 9b6:	5b 18       	sub	r5, r11
 9b8:	b3 2c       	mov	r11, r3
 9ba:	b3 14       	cp	r11, r3
 9bc:	68 f4       	brcc	.+26     	; 0x9d8 <__stack+0xd9>
 9be:	b7 01       	movw	r22, r14
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	3c 87       	std	Y+12, r19	; 0x0c
 9c6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 9ca:	b3 94       	inc	r11
 9cc:	3c 85       	ldd	r19, Y+12	; 0x0c
 9ce:	f5 cf       	rjmp	.-22     	; 0x9ba <__stack+0xbb>
 9d0:	b3 14       	cp	r11, r3
 9d2:	10 f4       	brcc	.+4      	; 0x9d8 <__stack+0xd9>
 9d4:	3b 18       	sub	r3, r11
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <__stack+0xdb>
 9d8:	31 2c       	mov	r3, r1
 9da:	34 ff       	sbrs	r19, 4
 9dc:	12 c0       	rjmp	.+36     	; 0xa02 <__stack+0x103>
 9de:	b7 01       	movw	r22, r14
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	3c 87       	std	Y+12, r19	; 0x0c
 9e6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 9ea:	3c 85       	ldd	r19, Y+12	; 0x0c
 9ec:	32 ff       	sbrs	r19, 2
 9ee:	17 c0       	rjmp	.+46     	; 0xa1e <__stack+0x11f>
 9f0:	31 fd       	sbrc	r19, 1
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	88 e7       	ldi	r24, 0x78	; 120
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	88 e5       	ldi	r24, 0x58	; 88
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b7 01       	movw	r22, r14
 a00:	0c c0       	rjmp	.+24     	; 0xa1a <__stack+0x11b>
 a02:	83 2f       	mov	r24, r19
 a04:	86 78       	andi	r24, 0x86	; 134
 a06:	59 f0       	breq	.+22     	; 0xa1e <__stack+0x11f>
 a08:	31 ff       	sbrs	r19, 1
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x111>
 a0c:	8b e2       	ldi	r24, 0x2B	; 43
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__stack+0x113>
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	37 fd       	sbrc	r19, 7
 a14:	8d e2       	ldi	r24, 0x2D	; 45
 a16:	b7 01       	movw	r22, r14
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a1e:	a5 14       	cp	r10, r5
 a20:	38 f4       	brcc	.+14     	; 0xa30 <__stack+0x131>
 a22:	b7 01       	movw	r22, r14
 a24:	80 e3       	ldi	r24, 0x30	; 48
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a2c:	5a 94       	dec	r5
 a2e:	f7 cf       	rjmp	.-18     	; 0xa1e <__stack+0x11f>
 a30:	aa 94       	dec	r10
 a32:	f4 01       	movw	r30, r8
 a34:	ea 0d       	add	r30, r10
 a36:	f1 1d       	adc	r31, r1
 a38:	80 81       	ld	r24, Z
 a3a:	b7 01       	movw	r22, r14
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a42:	a1 10       	cpse	r10, r1
 a44:	f5 cf       	rjmp	.-22     	; 0xa30 <__stack+0x131>
 a46:	33 20       	and	r3, r3
 a48:	09 f4       	brne	.+2      	; 0xa4c <__stack+0x14d>
 a4a:	51 ce       	rjmp	.-862    	; 0x6ee <vfprintf+0x24>
 a4c:	b7 01       	movw	r22, r14
 a4e:	80 e2       	ldi	r24, 0x20	; 32
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a56:	3a 94       	dec	r3
 a58:	f6 cf       	rjmp	.-20     	; 0xa46 <__stack+0x147>
 a5a:	f7 01       	movw	r30, r14
 a5c:	86 81       	ldd	r24, Z+6	; 0x06
 a5e:	97 81       	ldd	r25, Z+7	; 0x07
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	2c 96       	adiw	r28, 0x0c	; 12
 a68:	e2 e1       	ldi	r30, 0x12	; 18
 a6a:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__epilogue_restores__>

00000a6e <strnlen_P>:
 a6e:	fc 01       	movw	r30, r24
 a70:	05 90       	lpm	r0, Z+
 a72:	61 50       	subi	r22, 0x01	; 1
 a74:	70 40       	sbci	r23, 0x00	; 0
 a76:	01 10       	cpse	r0, r1
 a78:	d8 f7       	brcc	.-10     	; 0xa70 <strnlen_P+0x2>
 a7a:	80 95       	com	r24
 a7c:	90 95       	com	r25
 a7e:	8e 0f       	add	r24, r30
 a80:	9f 1f       	adc	r25, r31
 a82:	08 95       	ret

00000a84 <strnlen>:
 a84:	fc 01       	movw	r30, r24
 a86:	61 50       	subi	r22, 0x01	; 1
 a88:	70 40       	sbci	r23, 0x00	; 0
 a8a:	01 90       	ld	r0, Z+
 a8c:	01 10       	cpse	r0, r1
 a8e:	d8 f7       	brcc	.-10     	; 0xa86 <strnlen+0x2>
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	8e 0f       	add	r24, r30
 a96:	9f 1f       	adc	r25, r31
 a98:	08 95       	ret

00000a9a <fputc>:
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	fb 01       	movw	r30, r22
 aa4:	23 81       	ldd	r18, Z+3	; 0x03
 aa6:	21 fd       	sbrc	r18, 1
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <fputc+0x16>
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	9f ef       	ldi	r25, 0xFF	; 255
 aae:	28 c0       	rjmp	.+80     	; 0xb00 <fputc+0x66>
 ab0:	22 ff       	sbrs	r18, 2
 ab2:	16 c0       	rjmp	.+44     	; 0xae0 <fputc+0x46>
 ab4:	46 81       	ldd	r20, Z+6	; 0x06
 ab6:	57 81       	ldd	r21, Z+7	; 0x07
 ab8:	24 81       	ldd	r18, Z+4	; 0x04
 aba:	35 81       	ldd	r19, Z+5	; 0x05
 abc:	42 17       	cp	r20, r18
 abe:	53 07       	cpc	r21, r19
 ac0:	44 f4       	brge	.+16     	; 0xad2 <fputc+0x38>
 ac2:	a0 81       	ld	r26, Z
 ac4:	b1 81       	ldd	r27, Z+1	; 0x01
 ac6:	9d 01       	movw	r18, r26
 ac8:	2f 5f       	subi	r18, 0xFF	; 255
 aca:	3f 4f       	sbci	r19, 0xFF	; 255
 acc:	31 83       	std	Z+1, r19	; 0x01
 ace:	20 83       	st	Z, r18
 ad0:	8c 93       	st	X, r24
 ad2:	26 81       	ldd	r18, Z+6	; 0x06
 ad4:	37 81       	ldd	r19, Z+7	; 0x07
 ad6:	2f 5f       	subi	r18, 0xFF	; 255
 ad8:	3f 4f       	sbci	r19, 0xFF	; 255
 ada:	37 83       	std	Z+7, r19	; 0x07
 adc:	26 83       	std	Z+6, r18	; 0x06
 ade:	10 c0       	rjmp	.+32     	; 0xb00 <fputc+0x66>
 ae0:	eb 01       	movw	r28, r22
 ae2:	09 2f       	mov	r16, r25
 ae4:	18 2f       	mov	r17, r24
 ae6:	00 84       	ldd	r0, Z+8	; 0x08
 ae8:	f1 85       	ldd	r31, Z+9	; 0x09
 aea:	e0 2d       	mov	r30, r0
 aec:	09 95       	icall
 aee:	89 2b       	or	r24, r25
 af0:	e1 f6       	brne	.-72     	; 0xaaa <fputc+0x10>
 af2:	8e 81       	ldd	r24, Y+6	; 0x06
 af4:	9f 81       	ldd	r25, Y+7	; 0x07
 af6:	01 96       	adiw	r24, 0x01	; 1
 af8:	9f 83       	std	Y+7, r25	; 0x07
 afa:	8e 83       	std	Y+6, r24	; 0x06
 afc:	81 2f       	mov	r24, r17
 afe:	90 2f       	mov	r25, r16
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <__ultoa_invert>:
 b0a:	fa 01       	movw	r30, r20
 b0c:	aa 27       	eor	r26, r26
 b0e:	28 30       	cpi	r18, 0x08	; 8
 b10:	51 f1       	breq	.+84     	; 0xb66 <__ultoa_invert+0x5c>
 b12:	20 31       	cpi	r18, 0x10	; 16
 b14:	81 f1       	breq	.+96     	; 0xb76 <__ultoa_invert+0x6c>
 b16:	e8 94       	clt
 b18:	6f 93       	push	r22
 b1a:	6e 7f       	andi	r22, 0xFE	; 254
 b1c:	6e 5f       	subi	r22, 0xFE	; 254
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	af 4f       	sbci	r26, 0xFF	; 255
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	3e d0       	rcall	.+124    	; 0xba6 <__ultoa_invert+0x9c>
 b2a:	b4 e0       	ldi	r27, 0x04	; 4
 b2c:	3c d0       	rcall	.+120    	; 0xba6 <__ultoa_invert+0x9c>
 b2e:	67 0f       	add	r22, r23
 b30:	78 1f       	adc	r23, r24
 b32:	89 1f       	adc	r24, r25
 b34:	9a 1f       	adc	r25, r26
 b36:	a1 1d       	adc	r26, r1
 b38:	68 0f       	add	r22, r24
 b3a:	79 1f       	adc	r23, r25
 b3c:	8a 1f       	adc	r24, r26
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	6a 0f       	add	r22, r26
 b44:	71 1d       	adc	r23, r1
 b46:	81 1d       	adc	r24, r1
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	20 d0       	rcall	.+64     	; 0xb8e <__ultoa_invert+0x84>
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__ultoa_invert+0x48>
 b50:	68 94       	set
 b52:	3f 91       	pop	r19
 b54:	2a e0       	ldi	r18, 0x0A	; 10
 b56:	26 9f       	mul	r18, r22
 b58:	11 24       	eor	r1, r1
 b5a:	30 19       	sub	r19, r0
 b5c:	30 5d       	subi	r19, 0xD0	; 208
 b5e:	31 93       	st	Z+, r19
 b60:	de f6       	brtc	.-74     	; 0xb18 <__ultoa_invert+0xe>
 b62:	cf 01       	movw	r24, r30
 b64:	08 95       	ret
 b66:	46 2f       	mov	r20, r22
 b68:	47 70       	andi	r20, 0x07	; 7
 b6a:	40 5d       	subi	r20, 0xD0	; 208
 b6c:	41 93       	st	Z+, r20
 b6e:	b3 e0       	ldi	r27, 0x03	; 3
 b70:	0f d0       	rcall	.+30     	; 0xb90 <__ultoa_invert+0x86>
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0x5c>
 b74:	f6 cf       	rjmp	.-20     	; 0xb62 <__ultoa_invert+0x58>
 b76:	46 2f       	mov	r20, r22
 b78:	4f 70       	andi	r20, 0x0F	; 15
 b7a:	40 5d       	subi	r20, 0xD0	; 208
 b7c:	4a 33       	cpi	r20, 0x3A	; 58
 b7e:	18 f0       	brcs	.+6      	; 0xb86 <__ultoa_invert+0x7c>
 b80:	49 5d       	subi	r20, 0xD9	; 217
 b82:	31 fd       	sbrc	r19, 1
 b84:	40 52       	subi	r20, 0x20	; 32
 b86:	41 93       	st	Z+, r20
 b88:	02 d0       	rcall	.+4      	; 0xb8e <__ultoa_invert+0x84>
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__ultoa_invert+0x6c>
 b8c:	ea cf       	rjmp	.-44     	; 0xb62 <__ultoa_invert+0x58>
 b8e:	b4 e0       	ldi	r27, 0x04	; 4
 b90:	a6 95       	lsr	r26
 b92:	97 95       	ror	r25
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x86>
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	61 05       	cpc	r22, r1
 ba2:	71 05       	cpc	r23, r1
 ba4:	08 95       	ret
 ba6:	9b 01       	movw	r18, r22
 ba8:	ac 01       	movw	r20, r24
 baa:	0a 2e       	mov	r0, r26
 bac:	06 94       	lsr	r0
 bae:	57 95       	ror	r21
 bb0:	47 95       	ror	r20
 bb2:	37 95       	ror	r19
 bb4:	27 95       	ror	r18
 bb6:	ba 95       	dec	r27
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0xa2>
 bba:	62 0f       	add	r22, r18
 bbc:	73 1f       	adc	r23, r19
 bbe:	84 1f       	adc	r24, r20
 bc0:	95 1f       	adc	r25, r21
 bc2:	a0 1d       	adc	r26, r0
 bc4:	08 95       	ret

00000bc6 <__prologue_saves__>:
 bc6:	2f 92       	push	r2
 bc8:	3f 92       	push	r3
 bca:	4f 92       	push	r4
 bcc:	5f 92       	push	r5
 bce:	6f 92       	push	r6
 bd0:	7f 92       	push	r7
 bd2:	8f 92       	push	r8
 bd4:	9f 92       	push	r9
 bd6:	af 92       	push	r10
 bd8:	bf 92       	push	r11
 bda:	cf 92       	push	r12
 bdc:	df 92       	push	r13
 bde:	ef 92       	push	r14
 be0:	ff 92       	push	r15
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
 bee:	ca 1b       	sub	r28, r26
 bf0:	db 0b       	sbc	r29, r27
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	f8 94       	cli
 bf6:	de bf       	out	0x3e, r29	; 62
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	09 94       	ijmp

00000bfe <__epilogue_restores__>:
 bfe:	2a 88       	ldd	r2, Y+18	; 0x12
 c00:	39 88       	ldd	r3, Y+17	; 0x11
 c02:	48 88       	ldd	r4, Y+16	; 0x10
 c04:	5f 84       	ldd	r5, Y+15	; 0x0f
 c06:	6e 84       	ldd	r6, Y+14	; 0x0e
 c08:	7d 84       	ldd	r7, Y+13	; 0x0d
 c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c10:	b9 84       	ldd	r11, Y+9	; 0x09
 c12:	c8 84       	ldd	r12, Y+8	; 0x08
 c14:	df 80       	ldd	r13, Y+7	; 0x07
 c16:	ee 80       	ldd	r14, Y+6	; 0x06
 c18:	fd 80       	ldd	r15, Y+5	; 0x05
 c1a:	0c 81       	ldd	r16, Y+4	; 0x04
 c1c:	1b 81       	ldd	r17, Y+3	; 0x03
 c1e:	aa 81       	ldd	r26, Y+2	; 0x02
 c20:	b9 81       	ldd	r27, Y+1	; 0x01
 c22:	ce 0f       	add	r28, r30
 c24:	d1 1d       	adc	r29, r1
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	ed 01       	movw	r28, r26
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
